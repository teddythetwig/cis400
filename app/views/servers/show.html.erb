<!-- Navbar -->
<div class="navbar navbar-fixed-top">
  <div class="navbar-inner">
    <div class="container-fluid">
      <!-- .btn-navbar is used as the toggle for collapsed navbar content -->
      <a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </a>
      <a href="/users" class="brand">SIQL</a>
      <div class="nav-collapse collapse">
        <div class="nav pull-right">
          <li class="divider-vertical"></li>
        <li class="dropdown">
          <a href="#" class="dropdown-toggle" data-toggle="dropdown">
            <b class="caret"></b>
          </a>
          <ul class="dropdown-menu">
            <li>
              <a href="##">Help</a>
            </li>
            <li>
              <%= link_to 'Logout', destroy_user_session_path, method: :delete %>
            </li>
        </li>
        </div>
      </div>
    </div> <!--/.container-fluid -->
  </div> <!--/.navbar-inner -->
</div> <!--/.navbar-fixed-top -->

<br />
<br />
<div class="page-header">
  <h1>Database Creation</h1>
</div>
<div class="container">
  <div id="container"></div>
  <script src="http://www.html5canvastutorials.com/libraries/kinetic-v4.3.0-beta2.js"></script>
  <script type="text/javascript">

/********* Global Variables *********/

// Position of current object
var x, y;

// List of tables
tables = new Array();

// List of allowable data types
datatypes = new Array("text", "number", "date");

// List of allowable relation types
reltypes = new Array("undefined", "one-to-one", "one-to-many", "many-to-one", "many-to-many");

// List of attributes
attributes = new Array();

// List of attribute lines
attrLines = new Array();

// List of Relations
relations = new Array();

// Graphics variables
var stage = new Kinetic.Stage({
    container: 'container',
    width: 1150,
    height: 500 });
//var layer = new Kinetic.Layer();
var currGroup = new Kinetic.Group();

// Finalization variable
var finalizeIdx = 0;
var finalizeArr = 0;

// Show variable
var attrShow = true;

// Viewport
var viewport = new Viewport(stage);

/********* Creation Methods *********/

/* 
* Creates table
* Note: Check table name is unique before calling.
*/
function createTable(tableName, rectX, rectY) {

    var group = new Kinetic.Group({
        draggable: true
    });

    var complexText = new Kinetic.Text({
        name: 'text',
        x: rectX,
        y: rectY,
        text: tableName,
        fontSize: 16,
        fontFamily: 'Calibri',
        fill: 'white',
        width: 160,
        padding: 20,
        align: 'center',
    });

    var rect = new Kinetic.Rect({
        name: 'shape',
        x: rectX,
        y: rectY,
        stroke: 'black',
        strokeWidth: 4,
        fill: 'mediumblue',
        width: 160,
        height: complexText.getHeight(),
        shadowColor: 'black',
        shadowBlur: 10,
        shadowOffset: [10, 10],
        shadowOpacity: 0.2,
        cornerRadius: 10
    });

    //Add Elements to group  
    group.add(rect);
    group.add(complexText);

    //Adds an empty attributes and neighbors array
    group.attr = new Array();
    group.neighbors = new Array();

    // Event handling
    group.on('mouseover', function() {
        document.body.style.cursor = 'pointer';
    });
    group.on('mouseout', function() {
        document.body.style.cursor = 'default';
    });  
    group.on('mousedown', function() {
        if(currGroup.getChildren().length > 0) {
            currGroup.get('.shape')[0].setStroke('black');
        }
        currGroup = group;
        document.getElementById('nameTitle').innerHTML = 'Table Name: ';
        document.getElementById('name').innerHTML = group.get('.text')[0].getText();
        group.get('.shape')[0].setStroke('lightsteelblue');

        var attrs = '';
        if(group.attr.length == 0) {
            attrs = 'None';
        } else {
            for (var i = 0; i < group.attr.length; i++) {
                attrs = attrs + group.attr[i];
                if((i + 1) < group.attr.length) {
                    attrs = attrs + ', ';
                } else {
                    attrs = attrs + ' ';
                }
            }
        }
        document.getElementById('attributeTitle').innerHTML = 'Attributes: ';
        document.getElementById('attribute').innerHTML = attrs;
    });

    group.on('dragstart dragmove', function(){
        update();
    });
    
    //Add group to table array  
    tables.push(group);

    //Add group to stage
    //layer.add(group);
    //stage.add(layer);
    viewport.add(group,1150); 
    viewport.draw();
}

/* 
* Creates attribute
*/
function createAttr(name, type, tableName, primary, notNull, unique, rectX, rectY) {

    var table = findTable(tableName);
    if(table == null) {
        alert('Table not found.');
        return;
    }
    if(!uniqueAttrName(name, tableName)) {
        alert('Attributes within a table must be unique.');
        return;
    }

    if (hasPrimaryKey(tableName) && primary) {
        alert('Table already contains Primary Attribute');
        return;
    }

    var group = new Kinetic.Group({draggable: true});

    var complexText = new Kinetic.Text({
       name: 'Atext',
       x: rectX,
       y: rectY,
       text: name,
       fontSize: 14,
       fontFamily: 'Calibri',
       fill: 'white',
       width: 80,
       padding: 20,
       align: 'center'
    });

    var rect = new Kinetic.Rect({
      name: 'shape',
      x: rectX,
      y: rectY,
      stroke: 'black',
      strokeWidth: 4,
      fill: 'orangered',
      width: 80,
      height: complexText.getHeight(),
      shadowColor: 'black',
      shadowBlur: 10,
      shadowOffset: [10, 10],
      shadowOpacity: 0.2,
      cornerRadius: 10
    });

    //Add Elements to group  
    group.add(rect);
    group.add(complexText);

    //Adding attributes to attribute (AttrGroup, ParentTable, Datatype, PrimaryKey, NotNull, Unique)
    var attGroup = [group, table, type, primary, notNull, unique];

    //Adding attribute to table
    table.attr.push(name);

    // Event handling
    group.on('mouseover', function() {
        document.body.style.cursor = 'pointer';
    });
    group.on('mouseout', function() {
        document.body.style.cursor = 'default';
    });  
    group.on('mousedown', function() {
        if(currGroup.getChildren().length > 0) {
            currGroup.get('.shape')[0].setStroke('black');
        }
        currGroup = group;

        document.getElementById('nameTitle').innerHTML = 'Attribute Name: ';
        var name = group.get('.Atext')[0].getText();
        if(attGroup[3]) {
            name = name + ' (Primary Key)';
        } else if (attGroup[4]) {
            name = name + ' (Not Null)';
        } else if (attGroup[5]) {
            name = name + ' (Unique)';
        }
        document.getElementById('name').innerHTML = name;
        group.get('.shape')[0].setStroke('lightsteelblue');

        document.getElementById('attributeTitle').innerHTML = 'Attribute Type: ';
        document.getElementById('attribute').innerHTML = attGroup[2];
    });
    
    group.on('dragstart dragmove', function(){
        update();
    });

    //Add group to attributes array  
    attributes.push(attGroup);
    
    //Adds connection line
    var line = new Kinetic.Line({
        name: name,
        points: [group.getX()+group.getChildren()[0].getWidth()/2+stage.getWidth() / 2 - 50, 
                 group.getY()+group.getChildren()[0].getHeight()/2+stage.getHeight() / 2 - 25, 
                 table.getX()+table.getChildren()[0].getWidth()/2+stage.getWidth() / 2 - 50,
                 table.getY()+table.getChildren()[0].getHeight()/2+stage.getHeight() / 2 - 25],
        stroke: 'black',
        strokeWidth: 2,
        lineCap: 'round',
        lineJoin: 'round'
    });
    
    var lineGroup = [line, table, group];

    attrLines.push(lineGroup);
    
    //Add group to stage
    //layer.add(group);
    //layer.add(line);
    //stage.add(layer);
    viewport.add(group,1150);
    viewport.add(line,1150);

    line.moveToBottom();
    //layer.draw();
    viewport.draw();

    if(!attrShow){
        line.setVisible(false);
        group.setVisible(false);
        //layer.draw();
        viewport.draw();
    }
}

/*
 * Creates Relations
 */
function createRelation(rname, tableArr, relX, relY){

    // Finds the table
    var rType = new Array();
    var rLines = new Array();
    var rTables = new Array();
    for(var i = 0; i < tableArr.length; i++) {
        var currTable = findTable(tableArr[i])
        if(currTable == null) {
          alert('Table not found');
        } else {
          rTables.push(currTable);
          rType.push('undefined');
        }
    }

    var group = new Kinetic.Group({draggable: true});

    var complexText = new Kinetic.Text({
       name: 'Rtext',
       x: relX,
       y: relY,
       text: rname,
       fontSize: 14,
       fontFamily: 'Calibri',
       fill: 'white',
       width: 80,
       padding: 20,
       align: 'center'
    });

    var ell = new Kinetic.Rect({
      name: 'shape',
      x: relX,
      y: relY,
      stroke: 'black',
      strokeWidth: 4,
      fill: 'green',
      width: 80,
      height: complexText.getHeight(),
      shadowColor: 'black',
      shadowBlur: 10,
      shadowOffset: [10, 10],
      shadowOpacity: 0.2,
      cornerRadius: 10
    });

    //Add Elements to group  
    group.add(ell);
    group.add(complexText);

    // Event handling
    group.on('mouseover', function() {
        document.body.style.cursor = 'pointer';
    });
    group.on('mouseout', function() {
        document.body.style.cursor = 'default';
    });  
    group.on('mousedown', function() {
        if(currGroup.getChildren().length > 0) {
            currGroup.get('.shape')[0].setStroke('black');
        }
        currGroup = group;

        document.getElementById('nameTitle').innerHTML = 'Relation Name: ';
        document.getElementById('name').innerHTML = rname;
        group.get('.shape')[0].setStroke('lightsteelblue');

        document.getElementById('attributeTitle').innerHTML = 'Tables: ';
        var tablesText = '';
        for(var i = 0; i < rTables.length; i++) {
            tablesText = tablesText + rTables[i].get('.text')[0].getText();
            if ((i + 1) < rTables.length) {
                tablesText = tablesText + ', ';
            }
             document.getElementById('attribute').innerHTML = tablesText;
        }
    });
    
    group.on('dragstart dragmove', function(){
        update();
    });

    //layer.add(group);
    viewport.add(group,1150);

    for(var i = 0; i < rTables.length; i++) {
        var currTable = rTables[i];
        var line = new Kinetic.Line({
            name: rname,
            points: [group.getX()+currTable.getChildren()[0].getWidth()/2+stage.getWidth() / 2 - 50, 
                 group.getY()+currTable.getChildren()[0].getHeight()/2+stage.getHeight() / 2 - 25, 
                 currTable.getX()+group.getChildren()[0].getWidth()/2+stage.getWidth() / 2 - 50,
                 currTable.getY()+group.getChildren()[0].getHeight()/2+stage.getHeight() / 2 - 25],
            stroke: 'red',
            strokeWidth: 5,
            lineCap: 'round',
            lineJoin: 'round'
        });
        rLines.push(line);
        //layer.add(line);
        viewport.add(line,1150);
        line.moveToBottom();
    }

    // Adding group of line and tables to realtions array (Line obj, FirstTable, SecondTable, Directionality)
    // 'undefined', 'one-to-one', 'one-to-many', 'many-to-many'
    var currRelation = [group, rLines, rTables, rType];
    relations.push(currRelation);
    //layer.draw();
    viewport.draw();
}

/*
* Updates all of the lines in the graph
*/
function update() {
    // Updates relation lines
    for(var i = 0; i < relations.length; i++) {
        var rel = relations[i][0];
        var lines = relations[i][1];
        for(var j = 0; j < lines.length; j++) {
            var table = relations[i][2][j];
            var line = lines[j];
            line.setPoints([table.getX()+table.getChildren()[0].getWidth()/2+stage.getWidth() / 2 - 50, 
                 table.getY()+table.getChildren()[0].getHeight()/2+stage.getHeight() / 2 - 25, 
                 rel.getX()+rel.getChildren()[0].getWidth()/2+stage.getWidth() / 2 - 50,
                 rel.getY()+rel.getChildren()[0].getHeight()/2+stage.getHeight() / 2 - 25]);
            //layer.draw();
            viewport.draw();
        }
    }
    
    // Updates attribute lines
    for(var i = 0; i < attrLines.length; i++) {
        var line = attrLines[i][0];
        var table = attrLines[i][1];
        var attr = attrLines[i][2];
        line.setPoints([attr.getX()+attr.getChildren()[0].getWidth()/2+stage.getWidth() / 2 - 50, 
                 attr.getY()+attr.getChildren()[0].getHeight()/2+stage.getHeight() / 2 - 25, 
                 table.getX()+table.getChildren()[0].getWidth()/2+stage.getWidth() / 2 - 50,
                 table.getY()+table.getChildren()[0].getHeight()/2+stage.getHeight() / 2 - 25]);
        //layer.draw();
        viewport.draw();
    }
}


/********* Table Functions *********/

/*
* Checks for table with provided name
*/
function findTable(name) {
    for(var i = 0; i < tables.length; i++) {
        if(name.toLowerCase() == tables[i].get('.text')[0].getText().toLowerCase()) {
            return tables[i];        
        }
    }
    return null;
}

/*
* Checks for unique table name.
*/
function uniqueTableName(name){
    for(var i = 0; i < tables.length; i++){
        if(name.toLowerCase() == tables[i].get('.text')[0].getText().toLowerCase()) {
            return false;
        }
    }
    return true;
}

/*
 * Modifies the existing table name to the provided table name
 */
function editTableName(oldName, newName) {
    var table = findTable(oldName);
    if(table == null) {
        alert("Table does not exist");
        return;
    }
    if(uniqueTableName(newName)) {
        table.get('.text')[0].setText(newName);
        //layer.draw();
        viewport.draw();
    }
    else {
        alert("Table names must be unique.");
    }
}

/*
 * Check if table has a primary key
 */
function hasPrimaryKey(tableName) {
    var table = findTable(tableName);
    for(var i = 0; i < table.attr.length; i++) {
	    var attrName = table.attr[i];
        var attr = findAttr(attrName, tableName);
        if(attr[3]) {
            return true;
        }
    }
    return false;
}

/*
* Check if table has obvious primary key
*/
function obviousPrimaryKey(tableName) {
  if(hasPrimaryKey(tableName)) { return true; }
  var attrs = getAttrs(tableName);
  var i;
  for(i=0; i<attrs.length; i++) {
    if(attrs[i].toLowerCase() == 'id') {
      editAttrPrimary(attrs[i], tableName, true);
      return true;
    }
  }
  return false;
}

/*
 * Returns name of Primary Key
 */
function getPrimaryKey(tableName) {
    var table = findTable(tableName);
    for(var i = 0; i < table.attr.length; i++) {
        var attrName = table.attr[i];
        var attr = findAttr(attrName, tableName);
        if(attr[3]) {
            return attr;
        }
    }
    return null;
}

/*
 * Deletes table from tables array, any connected attributes, and any relations connected to table
 */
function deleteTable(tableName) {
    // Deletes attribute lines from attrLines array
    for(var i = 0; i < attrLines.length; i++) {
        if((attrLines[i][1].get('.text')[0].getText().toLowerCase() == tableName.toLowerCase())) {
            if(attrShow) {
                attrLines[i][0].remove();
            }
            attrLines.splice(i, 1);
	    i--;
        }
    }
    
    // Deletes connected attributes from attributes table
    for(var i = 0; i < attributes.length; i++) {
        if(attributes[i][1].get('.text')[0].getText().toLowerCase() == tableName.toLowerCase()) {
            if(attrShow) {
                attributes[i][0].remove();
            }
            attributes.splice(i, 1);
	    i--;
        }
    }
    
    // Deletes relations connected with table
     for(var i = 0; i < relations.length; i++) {
         if((relations[i][1].get('.text')[0].getText().toLowerCase() == tableName.toLowerCase()) ||
            (relations[i][2].get('.text')[0].getText().toLowerCase() == tableName.toLowerCase())) {
             relations[i][0].remove();
             relations.splice(i,1);
	     i--;
         }
         
     }
    // Delete table from tables array
    for(var i = 0; i < tables.length; i++) {
        if(tables[i].get('.text')[0].getText().toLowerCase() == tableName.toLowerCase()) {
            tables[i].remove();
            tables.splice(i, 1);
            break;
        }
    }
    
    //layer.draw();
    viewport.draw();
}


/********* Attribute Functions *********/

/*
* Checks  for unique attribute name within a table
*/
function uniqueAttrName(attrName, tableName) {
    var table = findTable(tableName);
    if(table.attr.indexOf(attrName) > -1) {
        return false;
    }
    return true;
}

/*
* Finds the provided attribute based on its name and table name
*/
function findAttr(attrName, tableName) {
    for(var i = 0; i < attributes.length; i++) {
        if((attributes[i][0].get('.Atext')[0].getText().toLowerCase() == attrName) &&
            (attributes[i][1].get('.text')[0].getText().toLowerCase() == tableName)) {
            return attributes[i];
        }
    }
    return null;
}

/*
* Modifies the existing attribute name to the provided attribute name
*/
function editAttrName(oldAttrName, newAttrName, tableName) {
    var attr = findAttr(oldAttrName, tableName);
    var table = findTable(tableName);
    attr[0].get('.Atext')[0].setText(newAttrName);
    for(var i = 0; i < table.attr.length; i++) {
        if(table.attr[i] == oldAttrName) {
            table.attr[i] = newAttrName;
        }
    }
    //layer.draw();
    viewport.draw();
}

/*
* Modifies the existing attribute datatype to the provided attribute datatype
*/
function editAttrType(attrName, tableName, newAttrType) {
    var attr = findAttr(attrName, tableName);
    if(attr[2] != newAttrType) {
        attr[2] = newAttrType;
	return true;
    }
    else
        return false;
}

/*
* Modifies the primary key status of provided attribute if possible
*/
function editAttrPrimary(attrName, tableName, primary) {
    var attr = findAttr(attrName, tableName);
    // case 1: update, [true->false]
    if(attr[3] && !primary) {
	attr[3] = false;
	return true;
    }
    // case 2: update if possible, [false->true]
    else if(!attr[3] && primary) {
        if(hasPrimaryKey(tableName)) {
	    attr[3] = false;
            alert('This table already has a primary key');
	    return false;
        } else {
            attr[3] = true;
	    return true;
        }
    }
    // case 3: no change, [true->true] or [false->false]
    else {
      return false;
    }
}

/*
 * Deletes Attribute from attributes and the connected table
 */
function deleteAttribute(attrName, tableName) {
    //Deletes attribute from table
    for(var i = 0; i < tables.length; i++) {
        if(tables[i].get('.text')[0].getText().toLowerCase() == tableName.toLowerCase()) {
            var table = tables[i];
            for(var j = 0; j < table.attr.length; j++) {
                if(table.attr[j].toLowerCase() == attrName.toLowerCase()) {
                    table.attr.splice(j, 1);
                }
            }
        }
    }
    
    // Deletes attribute lines from attrLines array
    for(var i = 0; i < attrLines.length; i++) {
        if((attrLines[i][1].get('.text')[0].getText().toLowerCase() == tableName.toLowerCase()) &&
            (attrLines[i][2].get('.Atext')[0].getText().toLowerCase() == attrName.toLowerCase())) {
            attrLines[i][0].remove();
            attrLines.splice(i, 1);
            break;
        }
    }
    
    // Deletes attribute from attributes array
    for(var i = 0; i < attributes.length; i++) {
        if((attributes[i][0].get('.Atext')[0].getText().toLowerCase() == attrName.toLowerCase()) &&
            (attributes[i][1].get('.text')[0].getText().toLowerCase() == tableName.toLowerCase())) {
            attributes[i][0].remove();
            attributes.splice(i, 1);
            break;
        }
    }
    
    //layer.draw();
    viewport.draw();
}

/*
 * Shows and hides attributes in graph
 */
function onAttrShow() {
    attrShow = document.getElementById("showAttr").checked;
    //Adds/Removes attribute lines from canvas
    for(var i = 0; i < attrLines.length; i++) {
        attrLines[i][0].setVisible(attrShow);
    }

    //Adds/Removes attributes from canvas
    for(var i = 0; i < attributes.length; i++) {
        attributes[i][0].setVisible(attrShow);
    }
    //layer.draw();
    viewport.draw();
}

/********* Relation Functions *********/

/*
* Finds the provided relation based on its name
*/
function findRelation(relName) {
    for(var i = 0; i < relations.length; i++) {
        if(relations[i][0].getName().toLowerCase() == relName.toLowerCase()) {
            return relations[i];
        }
    }
    return null;
}

/*
* Modifies the existing relation name to the provided relation name
*/
function editRelationName(oldRelName, newRelName) {
    var rel = findRelation(oldRelName);
    rel[0].setName(newRelName);
}

/*
* Modifies the existing relation type to the provided relation type
*/
function editRelationType(relName, newRelType) {
    var rel = findRelation(relName);
    if(rel[3] == newRelType)
      return false;
    else { 
      rel[3] = newRelType;
      return true;
    }
}

/*
 * Deletes relation from relations array
 */
function deleteRelation(relName) {
    for(var i = 0; i < relations.length; i++) {
        if(relations[i][0].getName().toLowerCase() == relName.toLowerCase()) {
            relations[i][0].remove();
            relations.splice(i, 1);
        }
    }
    
    //layer.draw();
    viewport.draw();
}

/*
 * Checks  for unique relation name
 */
function uniqueRelName(relName) {
    for(var i = 0; i < relations.length; i++) {
        if(relations[i][0].getName().toLowerCase() == relName.toLowerCase()) {
            return false;
	   }
    }
    return true;
}

/*
 * Shows and Hides Relations
 */
function onRelShow() {
    relShow = document.getElementById("showRel").checked;

    // Updates relation lines and relation table
    for(var i = 0; i < relations.length; i++) {
        var rel = relations[i][0].setVisible(relShow);
        var lines = relations[i][1];
        for(var j = 0; j < lines.length; j++) {
            lines[j].setVisible(relShow);
        }
    }
    //layer.draw();
    viewport.draw();
}

/*
 * Converts xml schema into current schema
 */
function convert(schema) {
   return false;   
}

/*
 * Converts current graph to proper RDS SQL
 */
function convertToSQL() {
    var code = 'CREATE DATABASE MYTEST%3B\n';
    var currName = '';
    var tableA, tableB;


    //Table Creation
    for (var i = 0; i < tables.length; i++) {

        var primary = '';
        currName = tables[i].get('.text')[0].getText();
        code = code + 'CREATE TABLE MYTEST.' + currName + '\n(\n';
        for (var j = 0; j < tables[i].attr.length; j++) {

            var currAttr = new Array();
            for(var k = 0; k < attributes.length; k++) {
                if((attributes[k][0].get('.Atext')[0].getText().toLowerCase() == tables[i].attr[j].toLowerCase()) &&
                    (attributes[k][1].get('.text')[0].getText().toLowerCase() == currName.toLowerCase())) {
                    currAttr = attributes[k];
                }
            }

            code = code + '\t' + currAttr[0].get('.Atext')[0].getText() + ' ';

            switch(currAttr[2])
            {
            case 'text':
                code = code + 'VARCHAR(256)';
                break;
            case 'number':
                code = code + 'INTEGER';
                break;
            case 'date':
                code = code + 'DATETIME';
            }

            if(currAttr[3]) {
                code = code + ' NOT NULL';
                primary = currAttr[0].get('.Atext')[0].getText();
            }

            //Not Null
            if(currAttr[4]) {
                code = code + ' NOT NULL';
            }

            //Unique
            if(currAttr[5]) {
                code = code + ' UNIQUE';
            }

            code = code + ',\n';
        }
        code = code + '\tPRIMARY KEY (' + primary + ')\n'; //Assumes each table has a PRIMARY KEY
        code = code + ')\n%3B\n\n';
    }

    //Relation Table Creation
    for(var i = 0; i < relations.length; i++) {
        tableA = relations[i][1];
        tableB = relations[i][2];
        /*switch(relations[i][3])
        {
        case 'one-to-one':
            code = code; //TODO: IMPLEMENT
            break;
        case 'one-to-many':
            code = code; //TODO: IMPLEMENT
            break;
        case 'many-to-amy':*/
            var primaryA = getPrimaryKey(tableA.get('.text')[0].getText());
            var primaryB = getPrimaryKey(tableB.get('.text')[0].getText());
            code = code + 'CREATE TABLE MYTEST.' + relations[i][0].getName() + '\n(\n\t' + primaryA[0].get('.Atext')[0].getText();
            switch(primaryA[2])
            {
            case 'text':
                code = code + 'VARCHAR(256)';
                break;
            case 'number':
                code = code + 'INTEGER';
                break;
            case 'date':
                code = code + 'DATETIME';
            }

            code = code + ' NOT NULL REFERENCES ' + tableA.get('.text')[0].getText() + ' (' + primaryA[0].get('.Atext')[0].getText() + '),\n\t'
                + primaryB[0].get('.Atext')[0].getText();

            switch(primaryB[2])
            {
            case 'text':
                code = code + 'VARCHAR(256)';
                break;
            case 'number':
                code = code + 'INTEGER';
                break;
            case 'date':
                code = code + 'DATETIME';
            }

            code = code + ' NOT NULL REFERENCES ' + tableB.get('.text')[0].getText() + ' (' + primaryB[0].get('.Atext')[0].getText() + '),\n\tPRIMARY KEY (' +
                primaryA[0].get('.Atext')[0].getText() + ', ' + primaryB[0].get('.Atext')[0].getText() + ')\n)\n;\n\n';
        //}
    }
    alert(code);
    submitQuery('<%= "/users/#{@user.id}/servers/#{@server.id}/query" %>', code, (function(response){alert(response[0])}));
}

/*
 * Converts current graph to MySQL
 */
function convertToCode() {
    var code = '<p>CREATE DATABASE MYTEST;</p><p>USE MYTEST;</p><p>';
    var currName = '';
    var tableA, tableB;


    //Table Creation
    for (var i = 0; i < tables.length; i++) {

        var primary = '';
        var primaryKey = false;
        currName = tables[i].get('.text')[0].getText();
        code = code + 'CREATE TABLE ' + currName + ' (</p><p>    ';
        for (var j = 0; j < tables[i].attr.length; j++) {

            var currAttr = new Array();
            for(var k = 0; k < attributes.length; k++) {
                if((attributes[k][0].get('.Atext')[0].getText().toLowerCase() == tables[i].attr[j].toLowerCase()) &&
                    (attributes[k][1].get('.text')[0].getText().toLowerCase() == currName.toLowerCase())) {
                    currAttr = attributes[k];
                }
            }

            code = code + '    ' + currAttr[0].get('.Atext')[0].getText() + ' ';

            switch(currAttr[2])
            {
            case 'text':
                code = code + 'VARCHAR(256)';
                break;
            case 'number':
                code = code + 'INTEGER';
                break;
            case 'date':
                code = code + 'DATETIME';
            }

            //Primary Key
            if(currAttr[3]) {
                code = code + ' NOT NULL';
                primary = currAttr[0].get('.Atext')[0].getText();
                primaryKey = true;
            }



            if(primaryKey && ((j + 1) == tables[i].attr.length) || (j+1) < tables[i].attr.length) {
                code = code + ',</p><p>    ';
            } else {
                code = code + '</p><p>';
            }

        }
        if(primaryKey) {
            code = code + '    PRIMARY KEY (' + primary + ')</p><p>';
        }
        code = code + ');</p><p>';
    }

    //Relation Table Creation
    for(var i = 0; i < relations.length; i++) {
        tableA = relations[i][1];
        tableB = relations[i][2];
        /*switch(relations[i][3])
        {
        case 'one-to-one':
            code = code; //TODO: IMPLEMENT
            break;
        case 'one-to-many':
            code = code; //TODO: IMPLEMENT
            break;
        case 'many-to-amy':*/
            var primaryA = getPrimaryKey(tableA.get('.text')[0].getText());
            var primaryB = getPrimaryKey(tableB.get('.text')[0].getText());
            code = code + 'CREATE TABLE ' + relations[i][0].getName() + '(</p><p>    ' + primaryA[0].get('.Atext')[0].getText();
            switch(primaryA[2])
            {
            case 'text':
                code = code + 'VARCHAR(256)';
                break;
            case 'number':
                code = code + 'INTEGER';
                break;
            case 'date':
                code = code + 'DATETIME';
            }

            code = code + ' NOT NULL REFERENCES ' + tableA.get('.text')[0].getText() + ' (' + primaryA[0].get('.Atext')[0].getText() + '),</p><p>    '
                + primaryB[0].get('.Atext')[0].getText();

            switch(primaryB[2])
            {
            case 'text':
                code = code + 'VARCHAR(256)';
                break;
            case 'number':
                code = code + 'INTEGER';
                break;
            case 'date':
                code = code + 'DATETIME';
            }

            code = code + ' NOT NULL REFERENCES ' + tableB.get('.text')[0].getText() + ' (' + primaryB[0].get('.Atext')[0].getText() + '),\n\tPRIMARY KEY (' +
                primaryA[0].get('.Atext')[0].getText() + ', ' + primaryB[0].get('.Atext')[0].getText() + ')</p><p>);</p><p>';
        //}
    }
    code = code + '</p>'
    //alert(code);
    document.getElementById("DBCodeMySQL").innerHTML = code;
}



/********* HTML Helper Functions *********/
/*
* Generates HTML to dynamically populate selectors 
* from dynamic data structures
*/
function genSelectInnerHTML(id, arr, type, write) {
  if(typeof(write) === 'undefined') write = 1; // default value
  var ret = "";
  if(type == 0) { // simple arrays
    for(i=0; i<arr.length; i++) {
      ret += "\t<option value=\"" + arr[i] + "\">" + arr[i] + "</option>\n";
    }
  }
  else if(type == 1) { // tables array
    for(i=0; i<arr.length; i++) {
      ret += "\t<option value=\"" + arr[i].get('.text')[0].getText() + "\">" + arr[i].get('.text')[0].getText() + "</option>\n";
    }
  }
  else { // relations array
    for(i=0; i<arr.length; i++) {
      ret += "\t<option value=\"" + arr[i][0].getName() + "\">" + arr[i][0].getName() + "</option>\n";
    }
  }
  if(write)
    document.getElementById(id).innerHTML = ret;
  else
    return ret;
}

/*
* Returns value at current selcted index from HTML selector
*/
function getSelectVal(select) {
  return select.options[select.selectedIndex].value;
}

/*
* Initializes modal to create new table
*/
function initNewTable() {
  document.getElementById("newTableName").value = "";
}

/*
* Saves new table if valid info from modal
*/
function saveNewTable(e) {
  var tableName = document.getElementById("newTableName").value;
  if(tableName != "" && uniqueTableName(tableName)) {
    $('#newTableModal').modal('hide'); // hide modal on save
    createTable(tableName, 525, 225);
  }
  else {
    alert("Table names must be unique and nonempty.");
  }
}

/*
* Initializes modal to create new attribute
*/
function initNewAttr() {
  genSelectInnerHTML("tableNameA", tables, 1);
  genSelectInnerHTML("newAttrType", datatypes, 0);
  document.getElementById("newAttrName").value = "";
  document.getElementById("setPrimary").checked = false;
}

/*
* Saves new attribute if valid info from modal
*/
function saveNewAttr(e) {
  var tableName = getSelectVal(document.getElementById("tableNameA"));
  var attrName = document.getElementById("newAttrName").value;
  var attrType = getSelectVal(document.getElementById("newAttrType"));
  var attrPrimary = document.getElementById("setPrimary").checked;
  var attrNotNull = document.getElementById("setNotNull").checked;
  var attrUnique = false;
  if(attrName != "" && uniqueAttrName(attrName, tableName)) {
    $('#newAttributeModal').modal('hide'); // hide modal on save
    createAttr(attrName, attrType, tableName, attrPrimary, attrNotNull, attrUnique, 525, 225);
  }
  else {
    alert("Attribute names must be unique within a table and nonempty.");
  }
}

/*
* Initializes modal to edit existing table
*/
function initEditTable() {
  genSelectInnerHTML("oldTableName", tables, 1);
  document.getElementById("editTableName").value = "";
}

/*
* Saves changes to table if valid info from modal
*/
function saveEditTable(e) {
  var oldTableName = getSelectVal(document.getElementById("oldTableName"));
  var newTableName = document.getElementById("editTableName").value;
  if(newTableName != "" && uniqueTableName(newTableName)) {
    $('#editTableModal').modal('hide'); // hide modal on save
    editTableName(oldTableName, newTableName);
  }
  else {
    alert("Table names must be unique and nonempty.");
  }
}

/*
* Initializes modal to edit existing attribute
*/
function initEditAttr() {
  genSelectInnerHTML("tableNameB", tables, 1);
  // set invalid default index to ensure event is triggered later
  document.getElementById("tableNameB").selectedIndex = -1;
  document.getElementById("oldAttrName").selectedIndex = -1;
  document.getElementById("editAttrName").value = "";
  genSelectInnerHTML("editAttrType", datatypes, 0);
}

/*
* Updates attribute list based on table selection within modal
*/
function genAttrList(id1, id2) {
  var attrs = new Array();
  var tname = getSelectVal(document.getElementById(id1));
  var table = findTable(tname);
  for(i=0; i<table.attr.length; i++) {
    attrs.push(table.attr[i]);
  }
  genSelectInnerHTML(id2, attrs, 0);
  document.getElementById(id2).selectedIndex = -1; // need to trigger js event
}

function getAttrs(tableName) {
  var attrs = new Array();
  table = findTable(tableName);
  var i;
  for(i=0; i<table.attr.length; i++) {
    attrs.push(table.attr[i]);
  }
  return attrs;
}

/*
* Updates attribute properties based on currently selected attribute
*/
function genAttrProps() {
  var tableName = getSelectVal(document.getElementById("tableNameB"));
  var attrName = getSelectVal(document.getElementById("oldAttrName"));
  var attr = findAttr(attrName, tableName);
  var attrTypeIdx = datatypes.indexOf(attr[2]);
  var attrPrimary = ( (attr[3]) ? true : false );
  document.getElementById("editAttrType").selectedIndex = attrTypeIdx;
  document.getElementById("editPrimary").checked = attrPrimary;
}

/*
* Updates relation properties based on currently selected relation
*/
function genRelProps() {
  var relName = getSelectVal(document.getElementById("relNameC"));
  var rel = findRelation(relName);
  var relTypeIdx = reltypes.indexOf(rel[3]);
  document.getElementById("editRelType").selectedIndex = relTypeIdx; 
}

/*
* Saves changes to attribute if valid info from modal
*/
function saveEditAttr(e) {
  var tableName = getSelectVal(document.getElementById("tableNameB"));
  var oldAttrName = getSelectVal(document.getElementById("oldAttrName"));
  var newAttrName = document.getElementById("editAttrName").value;
  var newAttrType = getSelectVal(document.getElementById("editAttrType"));
  var attrPrimary = document.getElementById("editPrimary").checked;
  if(oldAttrName == newAttrName) {
    if(editAttrType(oldAttrName, tableName, newAttrType) || editAttrPrimary(newAttrName, tableName, attrPrimary)) {
      $('#editAttributeModal').modal('hide'); // hide modal on save
    } 
  }
  else if(newAttrName != "" && uniqueAttrName(newAttrName, tableName)) {
    $('#editAttributeModal').modal('hide'); // hide modal on save
    editAttrName(oldAttrName, newAttrName, tableName);
    editAttrType(newAttrName, tableName, newAttrType);
    editAttrPrimary(newAttrName, tableName, attrPrimary);
  }
  else {
    alert("Attribute names must be unique within a table and nonempty.");
  }
}

/*
* Initializes modal to delete existing table
*/
function initDelTable() {
  genSelectInnerHTML("delTableName", tables, 1);
}

/*
* Deletes table specified by modal
*/
function delTable(e) {
  var tableName = getSelectVal(document.getElementById("delTableName"));
  if(tableName != "") {
    $('#deleteTableModal').modal('hide'); // hide modal on save
    deleteTable(tableName);
  }
}

/*
* Initializes modal to delete existing attribute
*/
function initDelAttr() {
  genSelectInnerHTML("tableNameC", tables, 1);
  document.getElementById("tableNameC").selectedIndex = -1;
  document.getElementById("delAttrName").selectedIndex = -1;
}

/*
* Deletes attribute specified by modal
*/
function delAttr(e) {
  var tableName = getSelectVal(document.getElementById("tableNameC"));
  var attrName = getSelectVal(document.getElementById("delAttrName"));
  if(tableName != "" && attrName != "") {
    $('#deleteAttributeModal').modal('hide'); // hide modal on save
    deleteAttribute(attrName, tableName);
  }
}

var count;

/*
* Initializes modal to create new relation
*/
function initNewRelation() {
  document.getElementById("relNameA").value = "";
  document.getElementById("tableInputList").innerHTML = "";
  count = 1;
  for (var i = 0; i < 2; i++) {
    createRTableInputs();
  }
}

/*
 * Creates new table inputes
 */
function createRTableInputs() {

  var labelName = 'Table name #' + count;
  var myLabel = document.createElement('label');
  myLabel.setAttribute("for", labelName);
  myLabel.innerHTML = '<strong>' + labelName + '</strong>';
  var mySelect = document.createElement('select');
  mySelect.setAttribute("id", labelName);

  document.getElementById("tableInputList").appendChild(myLabel);
  document.getElementById("tableInputList").appendChild(mySelect);
  genSelectInnerHTML(labelName, tables, 1);
  document.getElementById(labelName).selectedIndex = -1;
  count++;
}


/*
* Saves new relation if valid info from modal
*/
function saveNewRelation(e) {
  var relName = document.getElementById("relNameA").value;
  var myTables = new Array();
  for (var i = 1; i < count; i++) {
    var labelName = 'Table name #' + i;
    var tableName = getSelectVal(document.getElementById(labelName));
    if(myTables.indexOf(tableName) != -1) {
      alert("Cannot connect a table to itself.");
    } else {
      myTables.push(tableName);
    }
  }
  if(relName != "" && uniqueRelName(relName)) {
    $('#newRelationModal').modal('hide'); // hide modal on save
    createRelation(relName, myTables, 525, 225);
  }
  else {
    alert("Relation names must be unique and nonempty.");
  }
}

/*
* Initializes modal to edit existing relation
*/
function initEditRelation() {
  genSelectInnerHTML("relNameC", relations, 2);
  // need to trigger js event
  document.getElementById("relNameC").selectedIndex = -1;
  document.getElementById("editRelName").value = "";
}

/*
* Updates relations list based on selection within modal
*/
function editRelation(e) {
  var oldRelName = getSelectVal(document.getElementById("relNameC"));
  var newRelName = document.getElementById("editRelName").value;

  if(oldRelName == newRelName) {
    $('#editRelationModal').modal('hide'); // hide modal on save
  }
  else if(newRelName != "" && uniqueRelName(newRelName)) {
    $('#editRelationModal').modal('hide'); // hide modal on save
      editRelationName(oldRelName, newRelName);
  }
  else {
    alert("Relation names must be unique and nonempty.");
  }
}

/*
* Initializes modal to delete existing relation
*/
function initDelRelation() {
  genSelectInnerHTML("relNameB", relations, 2);
}

/*
* Deletes relation specified by modal
*/
function delRelation(e) {
  var relName = getSelectVal(document.getElementById("relNameB"));
  if(relName != "") {
    $('#deleteRelationModal').modal('hide'); // hide modal on save
    deleteRelation(relName);
  }
}


/*
* Sends post request to query endpoint
*/
function submitQuery(path, query, callback){
  $.ajax({url: path,
    type: 'POST',
    beforeSend: function(xhr){xhr.setRequestHeader('X-CSRF-TOKEN',$('meta[name="csrf-token"]').attr('content'))},
    data: 'query=' + query,
    success: function(response){callback(response)}
  });
  //$.post(path,q,callback);
 /*
 
  method = "post";
  
  var form = document.createElement("form");
  form.setAttribute("method", method);
  form.setAttribute("path", path);
  
  for(var key in params) { 
    var hiddenField = document.createElement("input");
    hiddenField.setAttribute("type", "hidden");
    hiddenField.setAttribute("name", key);
    hiddenField.setAttribute("value", params[key]);
    form.appendChild(hiddenField);
  }
  document.body.appendChild(form);
  form.submit();
  */
  
}

/*
* Initializes modal to finalize database schema
*/
function initFinalize() {
  finalizeNext("finalizeModalDiv");
}

/*
* Advances finalization process to next step.
* Called each time a modal must change its body
* Either continues to next finalization step, or
*   closes the modal if all steps are complete
*/
function finalizeNext(id) {
  // handle last finalization step
  if(finalizeArr == 0) finalizeArr++;
  else if(finalizeArr == 1) { // table constraint
    var pkey = getSelectVal(document.getElementById("finalizeSelector"));
    alert("pkey: " + pkey);
    var tname = tables[finalizeIdx-1].get('.text')[0].getText();
    if(pkey == "Don't Know") {
      pkey = "sysid";
      createAttr(pkey, 'number', tname, true, 525, 225);
    }
    else {
      editAttrPrimary(pkey, tname, true);
    }
    if(finalizeIdx == tables.length) { finalizeArr++; finalizeIdx = 0; }
  }
  else if(finalizeArr == 2) { // reltaion constraint
    if(finalizeIdx == relations.length) { finalizeArr++; finalizeIdx = 0; }
  }
  
  // determine if schema is now fully constrained
  if(!isFinalized()) { 

    var div = document.getElementById(id);
    var html = "";

    /*
    * Case 1: Check tables array for constraints
    */
    if(finalizeArr == 1) {

      // display next table constraint (primary key)
      var tableName = tables[finalizeIdx].get('.text')[0].getText();
      html += "<h4>Table: " + tableName.toLowerCase() + "</h4>";
      html += "<p>Which of the following attributes is the identifier for your table?</p>";

      // generate table attrributes selector html
      if(obviousPrimaryKey(tableName)) {
	finalizeIdx++;
        finalizeNext(id);
      }
      else {
        var attrs = getAttrs(tableName);
        html += "<select id='finalizeSelector'>" + genSelectInnerHTML("finalizeSelector", attrs, 0, 0) + "</select>";
    
        div.innerHTML = html;
    
        // Don't know option - generate automatic sysid
        var opt = document.createElement("option");
        opt.text = "Don't Know";
        var sel = document.getElementById("finalizeSelector");
        sel.add(opt, sel.options[null]);
        
        finalizeIdx++;
      }
    }
    /*
    * Case 2: Check relations array for constraints
    */
    else if(finalizeArr == 2) {

      // display next relation constraint (relation types for connected tables)
      html += "<h4>Relation: " + relations[finalizeIdx].get('.text')[0].getText().toLowerCase() + "</h4>";
      html += "<p>Does [tableName1] have many [tableName2]?</p>";
      html += "<p>Does [tableName2] have many [tableName1]?</p>";
      
      div.innerHTML = html;
      finalizeIdx++;
    }

  }
  else { // schema is fully constrained at this point
    finalizeArr = 0; 
    $('#finalizeModal').modal('hide'); // hide modal on completion of schema finalization
    // after this point we can convert our JS objects into SQL to send to RDS
  }
}

function isFinalized() {
  return finalizeArr > 2;
}

</script>

  <!-- newTableModal -->
  <div id="newTableModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="newTableModalLabel" aria-hidden="true">
    <div class="modal-header">
      <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
      <h3 id="newTableModalLabel">Create new table</h3>
    </div>
    <div class="modal-body">
      <label for="newTableName"><strong>Table name</strong></label>
      <input type="text" id="newTableName" value="">
    </div>
    <div class="modal-footer">
      <button class="btn" data-dismiss="modal">Close</button>
      <button id="newTableBtn" class="btn btn-primary" onclick="saveNewTable()">Save table</button>
    </div>
  </div>

  <!-- newAttributeModal -->
    <div id="newAttributeModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="newAttributeModalLabel" aria-hidden="true">
    <div class="modal-header">
      <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
      <h3 id="newAttributeModalLabel">Create new attribute</h3>
    </div>
    <div class="modal-body">
      <label for="tableNameA"><strong>Table name</strong></label>
      <select id="tableNameA">
      </select>
      <label for="newAttrName"><strong>Attribute name</strong></label>
      <input type="text" id="newAttrName" value="">
      <label for="newAttrType"><strong>Attribute type</strong></label>
      <select id="newAttrType">
      </select><br />
      <input type="checkbox" id="setPrimary" value="1">&nbsp;
      <label for="setPrimary"><span style="border-bottom:1px dashed #000;" title="Primary Key: uniquely identifies records in this table, e.g. SSN identifies Person">Primary?</span><label><br />
      <input type="checkbox" id="setNotNull" value="1">&nbsp;
      <label for="setNotNull"><span style="border-bottom:1px dashed #000;" title="Not Null: attribute cannot be missing when added to table, e.g. Name is necessary to differentiate a person, but is not a unique identifier">Not Null?</span><label><br />
      <input type="checkbox" id="setUnique" value="1">&nbsp;
      <label for="setUnique"><span style="border-bottom:1px dashed #000;" title="Unique: attribute is unique in this table, e.g. Drivers License is unique but might not be a unique identifier for a Person">Unique?</span><label><br />
    </div>
    <div class="modal-footer">
      <button class="btn" data-dismiss="modal">Close</button>
      <button id="newAttrBtn" class="btn btn-primary" onclick="saveNewAttr()">Save attribute</button>
    </div>
  </div>

  <!-- editTableModal -->
  <div id="editTableModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="editTableModalLabel" aria-hidden="true">
    <div class="modal-header">
      <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
      <h3 id="editTableModalLabel">Edit table</h3>
    </div>
    <div class="modal-body">
      <label for="oldTableName"><strong>Table name</strong></label>
      <select id="oldTableName">
      </select>
      <label for="editTableName"><strong>New table name</strong></label>
      <input type="text" id="editTableName" value="">
    </div>
    <div class="modal-footer">
      <button class="btn" data-dismiss="modal">Close</button>
      <button id="editTableBtn" class="btn btn-primary" onclick="saveEditTable()">Save changes</button>
    </div>
  </div>

  <!-- editAttributeModal -->
  <div id="editAttributeModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="editAttributeModalLabel" aria-hidden="true">
    <div class="modal-header">
      <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
      <h3 id="editAttributeModalLabel">Edit attribute</h3>
    </div>
    <div class="modal-body">
      <label for="tableNameB"><strong>Table name</strong></label>
      <select id="tableNameB" onchange="genAttrList('tableNameB', 'oldAttrName')">
      </select>
      <label for="oldAttrName"><strong>Current attribute name</strong></label>
      <select id="oldAttrName" onchange="genAttrProps()">
      </select>
      <label for="editAttrName"><strong>New attribute name</strong></label>
      <input type="text" id="editAttrName" value="">
      <label for="editAttrType"><strong>Attribute type</strong></label>
      <select id="editAttrType">
      </select><br />
      <input type="checkbox" id="editPrimary" value="1">&nbsp;
      <label for="editPrimary"><span style="border-bottom:1px dashed #000;" title="Primary Key: uniquely identifies records in this table, e.g. SSN identifies Person">Primary?</span><label>
    </div>
    <div class="modal-footer">
      <button class="btn" data-dismiss="modal">Close</button>
      <button id="editAttrBtn" class="btn btn-primary" onclick="saveEditAttr()">Save changes</button>
    </div>
  </div>

  <br />
  <div class="row">  
 
  <!-- deleteTableModal -->
  <div id="deleteTableModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="deleteTableModalLabel" aria-hidden="true">
    <div class="modal-header">
      <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
      <h3 id="deleteTableModalLabel">Delete table</h3>
    </div>
    <div class="modal-body">
      <label for="delTableName"><strong>Table name</strong></label>
      <select id="delTableName">
      </select>
    </div>
    <div class="modal-footer">
      <button class="btn" data-dismiss="modal">Close</button>
      <button id="delTableBtn" class="btn btn-danger" onclick="delTable()">Delete table</button>
    </div>
    </div>

    <!-- deleteAttributeModal -->
    <div id="deleteAttributeModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="deleteAttributeModalLabel" aria-hidden="true">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
        <h3 id="deleteAttributeModalLabel">Delete attribute</h3>
      </div>
      <div class="modal-body">
        <label for="tableNameC"><strong>Table name</strong></label>
        <select id="tableNameC" onchange="genAttrList('tableNameC', 'delAttrName')">
        </select>
        <label for="delAttrName"><strong>Attribute name</strong></label>
        <select id="delAttrName">
        </select>
      </div>
      <div class="modal-footer">
        <button class="btn" data-dismiss="modal">Close</button>
        <button id="delAttrBtn" class="btn btn-danger" onclick="delAttr()">Delete attribute</button>
      </div>
    </div>

  <!-- newRelationModal -->
  <div id="newRelationModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="newRelationModalLabel" aria-hidden="true">
    <div class="modal-header">
      <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
      <h3 id="newRelationModalLabel">Connect tables</h3>
    </div>
    <div class="modal-body">
      <label for="relNameA"><strong>Relation name</strong></label>
      <input type="text" id="relNameA" value="">
      <div id="tableInputList">

      </div>
      <button class='btn btn-primary' id="addTableInputs" onClick="createRTableInputs()">Add New Table</button>
    </div>
    <div class="modal-footer">
      <button class="btn" data-dismiss="modal">Close</button>
      <button id="newRelBtn" class="btn btn-primary" onclick="saveNewRelation()">Save relation</button>
    </div>
    </div>

  <!-- editRelationModal -->
  <div id="editRelationModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="editRelationModalLabel" aria-hidden="true">
    <div class="modal-header">
      <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
      <h3 id="editRelationModalLabel">Edit relation</h3>
    </div>
    <div class="modal-body">
      <label for="relNameC"><strong>Current relation name</strong></label>
      <select id="relNameC" onchange="genRelProps()">
      </select>
      <label for="editRelName"><strong>New relation name</strong></label>
      <input type="text" id="editRelName" value="">
    </div>
    <div class="modal-footer">
      <button class="btn" data-dismiss="modal">Close</button>
      <button id="editRelBtn" class="btn btn-primary" onclick="editRelation()">Edit relation</button>
    </div>
  </div>
  
  <!-- deleteRelationModal -->
    <div id="deleteRelationModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="deleteRelationModalLabel" aria-hidden="true">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
        <h3 id="deleteRelationModalLabel">Delete relation</h3>
      </div>
      <div class="modal-body">
        <label for="relNameB"><strong>Relation name</strong></label>
        <select id="relNameB">
	</select>
      </div>
      <div class="modal-footer">
        <button class="btn" data-dismiss="modal">Close</button>
        <button id="delRelBtn" class="btn btn-danger" onclick="delRelation()">Delete relation</button>
      </div>
    </div>

  <!-- finalizeModal -->
    <div id="finalizeModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="finalizeModalLabel" aria-hidden="true">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
        <h3 id="finalizeModalLabel">Final Steps</h3>
      </div>
      <div id="finalizeModalDiv" class="modal-body">
      </div>
      <div class="modal-footer">
        <button class="btn" data-dismiss="modal">Close</button>
        <button id="finalizeBtn" class="btn btn-primary" onclick="finalizeNext('finalizeModalDiv')">Add Constraint</button>
      </div>
    </div>

  <!-- finalizeModal -->
    <div id="DBCode" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="DBCode" aria-hidden="true">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
        <h3>Code of Schema</h3>
      </div>
      <div class="modal-body">
        <h3>MySQL</h3>
        <div id="DBCodeMySQL"></div>
      </div>
      <div class="modal-footer">
        <button class="btn" data-dismiss="modal">Close</button>
      </div>
    </div>
   
 <!-- table info display -->
    <div class="span8">
        <div class="row-fluid">
            <div class="span3">
                <h5>Show/Hide Attributes</h5>
            </div>
            <div class="span1">
                <input id="showAttr" onClick="onAttrShow()" type="checkbox" style="float-right" checked>
            </div>
            <div class="span3">
                <h5>Show/Hide Relations</h5>
            </div>
            <div class="span1">
                <input id="showRel" onClick="onRelShow()" type="checkbox" style="float-right" checked>
            </div>
        </div> <br />
        <table class= "table table-bordered">
            <tr>
                <td><div id="nameTitle">Table Name: </div></td>
                <td><div id="name">None</div></td>
            </tr>
            <tr>
                <td><div id="attributeTitle">Attributes: </div></td>
                <td><div id="attribute">None</div></td>
            </tr>
        </table>
    </div>

    <!-- GUI buttons -->
    <div class="span4">
      <a data-toggle="modal" href="#newTableModal" class="btn btn-primary" onclick="initNewTable()">New table</a>
      <a data-toggle="modal" href="#editTableModal" class="btn btn-warning" onclick="initEditTable()">Edit table</a>
      <a data-toggle="modal" href="#deleteTableModal"  class="btn btn-danger" onclick="initDelTable()">Delete table</a>
      <br /><br />
      <a data-toggle="modal" href="#newAttributeModal" class="btn btn-primary" onclick="initNewAttr()">New attribute</a>
      <a data-toggle="modal" href="#editAttributeModal" class="btn btn-warning" onclick="initEditAttr()">Edit attribute</a>
      <a data-toggle="modal" href="#deleteAttributeModal" class="btn btn-danger" onclick="initDelAttr()">Delete attribute</a>
      <br /><br />
      <a data-toggle="modal" href="#newRelationModal" class="btn btn-primary" onclick="initNewRelation()">Connect tables</a>
      <a data-toggle="modal" href="#editRelationModal" class="btn btn-warning" onclick="initEditRelation()">Edit connection</a>
      <a data-toggle="modal" href="#deleteRelationModal" class="btn btn-danger" onclick="initDelRelation()">Disconnect</a>
      <br /><br />
      <a data-toggle="modal" href="#finalizeModal" class="btn btn-success" onclick="initFinalize()">Finalize</a>
      <a class="btn" onclick="convertToSQL()">Convert</a> <!-- Should be called in Finalize when modal is complete -->
      <a data-toggle="modal" href="#DBCode" class="btn" onClick="convertToCode()">Code</a>
    </div>

  </div>

</div>
<script type="text/javascript">
$(document).ready( function() {
    // bind mouse wheel to affect scale
	$('#container').bind('mousewheel', function(event, delta) {
		
		// (delta will be 1 or -1)
		
		switch( delta ) {
			case -1:
				viewport.zoomOut();
				viewport.draw();
				break;
			case 1:
				viewport.zoomIn();
				viewport.draw();
				break;
		}
		
		// oh yeah, cancel the scroll!
		event.preventDefault();
	});
	
	var ArrowLeft = 37;
	var ArrowRight = 39;
	var ArrowUp = 38;
	var ArrowDown = 40;
	
	//var xOffset = 0;
	//var yOffset = 0;
	$(document).keydown(function(event){
		
		var keyCode = event.keyCode;
		
		//var stageMoveX = 0;
		//var stageMoveY = 0;
		switch( keyCode ) {
			case ArrowLeft:
				//stageMoveX--;
				viewport.panLeft(10);
				viewport.draw();
				event.preventDefault();
				break;
				
			case ArrowRight:
				viewport.panRight(10);
				viewport.draw();
				event.preventDefault();
				break;
				
			case ArrowUp:
				viewport.panUp(10);
				viewport.draw();
				event.preventDefault();
				break;
				
			case ArrowDown:
				viewport.panDown(10);
				viewport.draw();
				event.preventDefault();
				break;
		}
			
		// oh yeah, cancel the click!
		//event.preventDefault();
	});
});
</script>
