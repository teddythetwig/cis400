<!-- Navbar -->
<div class="navbar navbar-fixed-top">
  <div class="navbar-inner">
    <div class="container-fluid">
      <!-- .btn-navbar is used as the toggle for collapsed navbar content -->
      <a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </a>
      <a href="/users" class="brand">SIQL</a>
      <div class="nav-collapse collapse">
        <div class="nav pull-right">
          <li class="divider-vertical"></li>
        <li class="dropdown">
          <a href="#" class="dropdown-toggle" data-toggle="dropdown">
            <b class="caret"></b>
          </a>
          <ul class="dropdown-menu">
            <li>
              <a href="##">Help</a>
            </li>
            <li>
              <%= link_to 'Logout', destroy_user_session_path, method: :delete %>
            </li>
        </li>
        </div>
      </div>
    </div> <!--/.container-fluid -->
  </div> <!--/.navbar-inner -->
</div> <!--/.navbar-fixed-top -->

<br />
<br />
<div class="page-header">
  <h1> Database Creation </h1>
</div>
<div class="container">
  <div id="container"></div>
  <script src="http://www.html5canvastutorials.com/libraries/kinetic-v4.3.0-beta2.js"></script>
  <!-- <script src="../../../public/javascripts/graphics.js"></script> -->
  <script type="text/javascript">

/* Global Variables */

// Position of current object
var x, y;

// List of tables
tables = new Array();

// List of Array
attributes = new Array();

//Graphics variables
var stage = new Kinetic.Stage({
  container: 'container',
  //width: 578,
  //height: 200 });
  width: 1150,
  height: 500 });
var layer = new Kinetic.Layer();
var currGroup = new Kinetic.Group();

/* 
* Creates table
* Note: Check table name is unique before calling.
*
*/
function createTable(inputTxt) {
  var rectX = stage.getWidth() / 2 - 50;
  var rectY = stage.getHeight() / 2 - 25;
    
  var group = new Kinetic.Group({draggable: true});
    
  var complexText = new Kinetic.Text({
     name: 'text',
     x: rectX,
     y: rectY,
     text: inputTxt,
     fontSize: 16,
     fontFamily: 'Calibri',
     fill: 'white',
     width: 100,
     padding: 20,
     align: 'center',
  });

  var rect = new Kinetic.Rect({
    name: 'shape',
    x: rectX,
    y: rectY,
    stroke: 'black',
    strokeWidth: 4,
    fill: 'mediumblue',
    width: 100,
    height: complexText.getHeight(),
    shadowColor: 'black',
    shadowBlur: 10,
    shadowOffset: [10, 10],
    shadowOpacity: 0.2,
    cornerRadius: 10
  });
  
  //Add Elements to group  
  group.add(rect);
  group.add(complexText);
  
  //Adds an empty attributes and neighbors array
  group.attr = new Array();
  group.neighbors = new Array();
    
  // Event handling
  group.on('mouseover', function() {
    document.body.style.cursor = 'pointer';
  });
  group.on('mouseout', function() {
    document.body.style.cursor = 'default';
  });  
  group.on('mousedown', function() {
    if(currGroup.getChildren().length > 0)
        currGroup.get('.shape')[0].setStroke('black');
    currGroup = group;
    document.getElementById('name').innerHTML = group.get('.text')[0].getText();
    group.get('.shape')[0].setStroke('lightsteelblue');
      
    //TODO: Add multiple attributes functionality
    if(group.attr.length > 0){
      //document.getElementById('attribute').innerHTML = group.attr[0];
      document.getElementById('attribute').innerHTML = group.attr.length;
    }
  }); 
    
  //Add group to table array  
  tables.push(group);
    
  //Add group to stage
  layer.add(group);
  stage.add(layer);  
}

/* 
* Creates attribute
*
*/
function createAttr(name, type, tableName) {
  var rectX = stage.getWidth() / 2 - 75;
  var rectY = stage.getHeight() / 2 - 50;
    
  var table = findTable(tableName);
  if(table == null) {
        alert('Table not found');
  }
  if(!uniqueAttribute(name, tableName)) {
        alert('Attribute not unique');
  }
  
  var group = new Kinetic.Group({draggable: true});
    
  var complexText = new Kinetic.Text({
     name: 'Atext',
     x: rectX,
     y: rectY,
     text: name,
     fontSize: 16,
     fontFamily: 'Calibri',
     fill: 'white',
     width: 100,
     padding: 20,
     align: 'center',
  });

  var rect = new Kinetic.Rect({
    name: 'shape',
    x: rectX,
    y: rectY,
    stroke: 'black',
    strokeWidth: 4,
    fill: 'orangered',
    width: 100,
    height: complexText.getHeight(),
    shadowColor: 'black',
    shadowBlur: 10,
    shadowOffset: [10, 10],
    shadowOpacity: 0.2,
    cornerRadius: 10
  });
  
  //Add Elements to group  
  group.add(rect);
  group.add(complexText);
    
  //Adding attributes to attribute
  group.parent = table;
  group.type = type;
  group.primary = false;
    
  //Adding attribute to table
  table.attr.push(name);
    
  // Event handling
  group.on('mouseover', function() {
    document.body.style.cursor = 'pointer';
  });
  group.on('mouseout', function() {
    document.body.style.cursor = 'default';
  });  
  group.on('mousedown', function() {
    if(currGroup.getChildren().length > 0)
        currGroup.get('.shape')[0].setStroke('black');
    currGroup = group;
    group.get('.shape')[0].setStroke('lightsteelblue');
      
      alert('Datatype: ' + group.type + ', Parent:' + group.parent.get('.text')[0].getText());
  }); 
    
  //Add group to attributes array  
  attributes.push(group);
    
  //Add group to stage
  layer.add(group);
  stage.add(layer);  
}

/*
* Checks for table with inputName
*
*/
function findTable(name) {
    for(var i = 0; i < tables.length; i++) {
        if(name.toLowerCase() == tables[i].get('.text')[0].getText().toLowerCase()) {
            return tables[i];        
        }
    }
    return null;
}

/*
* Checks  for unique attribute name within a table
*
*/
function uniqueAttribute(name, tname) {
    table = findTable(tname);
    if(table.attr.indexOf(name) > -1) {
        return false;
    }
    return true;
}

/*
* Checks for unique table name.
*
*/
function uniqueTableName(name){
	for(var i = 0; i < tables.length; i++){
		if(name.toLowerCase() == tables[i].get('.text')[0].getText().toLowerCase()){
			return false;
		}
	}
	return true;
}

function saveNewTable(e) {
  var tableName = document.getElementById("newTableName").value;
  if(tableName.value != "") {
    $('#newTableModal').modal('hide'); // hide modal on save
    if(uniqueTableName(tableName)) {
      createTable(tableName);
    }
  }
}

function saveNewAttr(e) {
  var attrName = document.getElementById("newAttrName").value;
  var attrType = document.getElementById("newAttrType");
  attrType = attrType.options[attrType.selectedIndex].value;
  if(attrName != "") {
    $('#newAttributeModal').modal('hide'); // hide modal on save
  }
}

function saveEditTable(e) {
  var tableName = document.getElementById("editTableName").value;
  if(tableName != "") {
    $('#editTableModal').modal('hide'); // hide modal on save
  }
}

function saveEditAttr(e) {
  var attrName = document.getElementById("editAttrName").value;
  var attrType = document.getElementById("editAttrType");
  attrType = attrType.options[attrType.selectedIndex].value;
  if(attrName != "") {
    $('#editAttributeModal').modal('hide'); // hide modal on save
  }
}
</script>

  <!-- newTableModal -->
  <div id="newTableModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="newTableModalLabel" aria-hidden="true">
    <div class="modal-header">
      <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
      <h3 id="newTableModalLabel">Create new table</h3>
    </div>
    <div class="modal-body">
      <label for="newTableName"><strong>Table name</strong></label>
      <input type="text" id="newTableName" value="">
    </div>
    <div class="modal-footer">
      <button class="btn" data-dismiss="modal">Close</button>
      <button id="newTableBtn" class="btn btn-primary" onclick="saveNewTable()">Save table</button>
    </div>
  </div>

  <!-- newAttributeModal -->
  <div id="newAttributeModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="newAttributeModalLabel" aria-hidden="true">
    <div class="modal-header">
      <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
      <h3 id="newAttributeModalLabel">Add attribute to [tablename]</h3>
    </div>
    <div class="modal-body">
      <label for="newAttrName"><strong>Attribute name</strong></label>
      <input type="text" id="newAttrName" value="">
      <label for="newAttrType"><strong>Attribute type</strong></label>
      <select id="newAttrType">
	<option value="text">text</option>
	<option value="number">number</option>
      </select>
    </div>
    <div class="modal-footer">
      <button class="btn" data-dismiss="modal">Close</button>
      <button id="newAttrBtn" class="btn btn-primary" onclick="saveNewAttr()">Save attribute</button>
    </div>
  </div>

  <!-- editTableModal -->
  <div id="editTableModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="editTableModalLabel" aria-hidden="true">
    <div class="modal-header">
      <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
      <h3 id="editTableModalLabel">Edit [tablename]</h3>
    </div>
    <div class="modal-body">
      <label for="editTableName"><strong>Table name</strong></label>
      <input type="text" id="editTableName" value="">
    </div>
    <div class="modal-footer">
      <button class="btn" data-dismiss="modal">Close</button>
      <button id="editTableBtn" class="btn btn-primary" onclick="saveEditTable()">Save changes</button>
    </div>
  </div>

  <!-- editAttributeModal -->
  <div id="editAttributeModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="editAttributeModalLabel" aria-hidden="true">
    <div class="modal-header">
      <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
      <h3 id="editAttributeModalLabel">Edit [tablename] attribute</h3>
    </div>
    <div class="modal-body">
      <label for="editAttrName"><strong>Attribute name</strong></label>
      <input type="text" id="editAttrName" value="">
      <label for="editAttrType"><strong>Attribute type</strong></label>
      <select id="editAttrType">
	<option value="text">text</option>
	<option value="number">number</option>
      </select>
    </div>
    <div class="modal-footer">
      <button class="btn" data-dismiss="modal">Close</button>
      <button id="editAttrBtn" class="btn btn-primary" onclick="saveEditAttr()">Save changes</button>
    </div>
  </div>

  <br />
  <div class="row">
    <div class="span8">
      <table class= "table table-bordered">
        <tr>
          <td>Table Name: </td>
          <td><div id="name">None</div></td>
        </tr>
        <tr>
          <td>Attributes: </td>
          <td><div id="attribute">None</div></td>
        </tr>
      </table>
    </div>
    <div class="span4">
      <a data-toggle="modal" href="#newTableModal" class="btn btn-primary">New table</a>
      <a data-toggle="modal" href="#editTableModal" class="btn btn-warning">Edit table</a>
      <button class="btn btn-danger" onclick="">Delete table</button>
      <br /><br />
      <a data-toggle="modal" href="#newAttributeModal" class="btn btn-primary">New attribute</a>
      <a data-toggle="modal" href="#editAttributeModal" class="btn btn-warning">Edit attribute</a>
      <button class="btn btn-danger" onclick="">Delete attribute</button>
      <br /><br />
      <button class="btn btn-success" onclick="">Connect tables</button>
    </div>
  </div>

</div>
