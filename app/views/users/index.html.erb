<!-- Navbar -->
<div class="navbar navbar-fixed-top">
  <div class="navbar-inner">
    <div class="container-fluid">
      <!-- .btn-navbar is used as the toggle for collapsed navbar content -->
      <a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </a>
      <a href="/users" class="brand">SIQL</a>
      <div class="nav-collapse collapse">
        <div class="nav pull-right">
          <li class="divider-vertical"></li>
        <li class="dropdown">
          <a href="#" class="dropdown-toggle" data-toggle="dropdown">
            <b class="caret"></b>
          </a>
          <ul class="dropdown-menu">
            <li>
              <a href="##">Help</a>
            </li>
            <li>
              <%= link_to 'Logout', destroy_user_session_path, method: :delete %>
            </li>
        </li>
        </div>
      </div>
    </div> <!--/.container-fluid -->
  </div> <!--/.navbar-inner -->
</div> <!--/.navbar-fixed-top -->

<br />
<br />
<div class="page-header">
  <h1>Database Creation</h1>
</div>
<div class="container">
  <div id="container"></div>
  <script src="http://www.html5canvastutorials.com/libraries/kinetic-v4.3.0-beta2.js"></script>
  <!-- <script src="../../../public/javascripts/graphics.js"></script> -->
  <script type="text/javascript">

/********* Global Variables *********/

// Position of current object
var x, y;

// List of tables
tables = new Array();

// List of allowable data types
datatypes = new Array("text", "number", "date");

// List of attributes
attributes = new Array();

// List of attribute lines
attrLines = new Array();

// List of Relations
relations = new Array();

//Graphics variables
var stage = new Kinetic.Stage({
    container: 'container',
    width: 1150,
    height: 500 });
var layer = new Kinetic.Layer();
var currGroup = new Kinetic.Group();

/********* Creation Methods *********/

/* 
* Creates table
* Note: Check table name is unique before calling.
*/
function createTable(tableName) {
    var rectX = stage.getWidth() / 2 - 50;
    var rectY = stage.getHeight() / 2 - 25;

    var group = new Kinetic.Group({
        draggable: true
    });

    var complexText = new Kinetic.Text({
        name: 'text',
        x: rectX,
        y: rectY,
        text: tableName,
        fontSize: 16,
        fontFamily: 'Calibri',
        fill: 'white',
        width: 100,
        padding: 20,
        align: 'center',
    });

    var rect = new Kinetic.Rect({
        name: 'shape',
        x: rectX,
        y: rectY,
        stroke: 'black',
        strokeWidth: 4,
        fill: 'mediumblue',
        width: 100,
        height: complexText.getHeight(),
        shadowColor: 'black',
        shadowBlur: 10,
        shadowOffset: [10, 10],
        shadowOpacity: 0.2,
        cornerRadius: 10
    });

    //Add Elements to group  
    group.add(rect);
    group.add(complexText);

    //Adds an empty attributes and neighbors array
    group.attr = new Array();
    group.neighbors = new Array();

    // Event handling
    group.on('mouseover', function() {
        document.body.style.cursor = 'pointer';
    });
    group.on('mouseout', function() {
        document.body.style.cursor = 'default';
    });  
    group.on('mousedown', function() {
        if(currGroup.getChildren().length > 0) {
            currGroup.get('.shape')[0].setStroke('black');
        }
        currGroup = group;
        document.getElementById('name').innerHTML = group.get('.text')[0].getText();
        group.get('.shape')[0].setStroke('lightsteelblue');

        //TODO: Add multiple attributes functionality
        if(group.attr.length > 0){
            //document.getElementById('attribute').innerHTML = group.attr[0];
            document.getElementById('attribute').innerHTML = group.attr.length;
        }
    }); 
    
    //Add group to table array  
    tables.push(group);

    //Add group to stage
    layer.add(group);
    stage.add(layer);  
}

/* 
* Creates attribute
*/
function createAttr(name, type, tableName) {
    var rectX = stage.getWidth() / 2 - 75;
    var rectY = stage.getHeight() / 2 - 50;

    var table = findTable(tableName);
    if(table == null) {
        alert('Table not found.');
        return;
    }
    if(!uniqueAttribute(name, tableName)) {
        alert('Attributes within a table must be unique.');
        return;
    }

    var group = new Kinetic.Group({draggable: true});

    var complexText = new Kinetic.Text({
       name: 'Atext',
       x: rectX,
       y: rectY,
       text: name,
       fontSize: 16,
       fontFamily: 'Calibri',
       fill: 'white',
       width: 100,
       padding: 20,
       align: 'center'
    });

    var rect = new Kinetic.Rect({
      name: 'shape',
      x: rectX,
      y: rectY,
      stroke: 'black',
      strokeWidth: 4,
      fill: 'orangered',
      width: 100,
      height: complexText.getHeight(),
      shadowColor: 'black',
      shadowBlur: 10,
      shadowOffset: [10, 10],
      shadowOpacity: 0.2,
      cornerRadius: 10
    });

    //Add Elements to group  
    group.add(rect);
    group.add(complexText);

    //Adding attributes to attribute (AttrGroup, ParentTable, Datatype, PrimaryKey)
    var attGroup = [group, table, type, false];

    //Adding attribute to table
    table.attr.push(name);

    // Event handling
    group.on('mouseover', function() {
        document.body.style.cursor = 'pointer';
    });
    group.on('mouseout', function() {
        document.body.style.cursor = 'default';
    });  
    group.on('mousedown', function() {
        if(currGroup.getChildren().length > 0) {
            currGroup.get('.shape')[0].setStroke('black');
        }
        currGroup = group;
        group.get('.shape')[0].setStroke('lightsteelblue');

        //alert('Datatype: ' + group.type + ', Parent:' + group.parent.get('.text')[0].getText());
    });
    
    group.on('dragstart dragmove', function(){
        update();
    });

    table.on('dragstart dragmove', function(){
        update();
    });

    //Add group to attributes array  
    attributes.push(attGroup);
    
    //Adds connection line
    var line = new Kinetic.Line({
        name: name,
        points: [group.getX()+group.getChildren()[0].getWidth()/2+stage.getWidth() / 2 - 50, 
                 group.getY()+group.getChildren()[0].getHeight()/2+stage.getHeight() / 2 - 25, 
                 table.getX()+table.getChildren()[0].getWidth()/2+stage.getWidth() / 2 - 50,
                 table.getY()+table.getChildren()[0].getHeight()/2+stage.getHeight() / 2 - 25],
        stroke: 'black',
        strokeWidth: 2,
        lineCap: 'round',
        lineJoin: 'round'
    });
    
    var lineGroup = [line, table, group];

    attrLines.push(lineGroup);
    
    //Add group to stage
    layer.add(group);
    layer.add(line);
    stage.add(layer);
    
    line.moveToBottom();
    layer.draw();  
}

/*
* Creates Relations
*/
function createRelation(rname, tableName1, tableName2){
    // Finds the table
    table1 = findTable(tableName1);
    table2 = findTable(tableName2);

    if(table1 == null || table2 == null) {
        alert('Table not found');
    }

    var line = new Kinetic.Line({
        name: rname,
        points: [table1.getX()+table1.getChildren()[0].getWidth()/2+stage.getWidth() / 2 - 50, 
                 table1.getY()+table1.getChildren()[0].getHeight()/2+stage.getHeight() / 2 - 25, 
                 table2.getX()+table2.getChildren()[0].getWidth()/2+stage.getWidth() / 2 - 50,
                 table2.getY()+table2.getChildren()[0].getHeight()/2+stage.getHeight() / 2 - 25],
        stroke: 'red',
        strokeWidth: 5,
        lineCap: 'round',
        lineJoin: 'round'
      });

    table1.on('dragstart dragmove', function(){
        update();
    });

    table2.on('dragstart dragmove', function(){
        update();
    });

    // Adding group of line and tables to realtions array (Line obj, FirstTable, SecondTable, Directionality)
   // Directionality[-1:'NotDefined', 0:'one-to-one', 1:'one-to-many', 2:'many-to-many']
    var group = [line, table1, table2, -1];
    relations.push(group);

    //Add line to stage
    layer.add(line);
    stage.add(layer); 

    line.moveToBottom();
    layer.draw();
}

/*
* Updates all of the lines in the graph
*/
function update() {
    // Updates relation lines
    for(var i = 0; i < relations.length; i++) {
        var line = relations[i][0];
        var table1 = relations[i][1];
        var table2 = relations[i][2];
        line.setPoints([table1.getX()+table1.getChildren()[0].getWidth()/2+stage.getWidth() / 2 - 50, 
                 table1.getY()+table1.getChildren()[0].getHeight()/2+stage.getHeight() / 2 - 25, 
                 table2.getX()+table2.getChildren()[0].getWidth()/2+stage.getWidth() / 2 - 50,
                 table2.getY()+table2.getChildren()[0].getHeight()/2+stage.getHeight() / 2 - 25]);
        layer.draw();
    }
    
    // Updates attribute lines
    for(var i = 0; i < attrLines.length; i++) {
        var line = attrLines[i][0];
        var table = attrLines[i][1];
        var attr = attrLines[i][2];
        line.setPoints([attr.getX()+attr.getChildren()[0].getWidth()/2+stage.getWidth() / 2 - 50, 
                 attr.getY()+attr.getChildren()[0].getHeight()/2+stage.getHeight() / 2 - 25, 
                 table.getX()+table.getChildren()[0].getWidth()/2+stage.getWidth() / 2 - 50,
                 table.getY()+table.getChildren()[0].getHeight()/2+stage.getHeight() / 2 - 25]);
        layer.draw();
    }
}


/********* Table Functions *********/

/*
* Checks for table with provided name
*/
function findTable(name) {
    for(var i = 0; i < tables.length; i++) {
        if(name.toLowerCase() == tables[i].get('.text')[0].getText().toLowerCase()) {
            return tables[i];        
        }
    }
    return null;
}

/*
* Checks for unique table name.
*/
function uniqueTableName(name){
    for(var i = 0; i < tables.length; i++){
        if(name.toLowerCase() == tables[i].get('.text')[0].getText().toLowerCase()) {
            return false;
        }
    }
    return true;
}

/*
* Modifies the existing table name to the provided table name
*/
function editTableName(oldName, newName) {
    var table = findTable(oldName);
    if(table == null) {
        alert("Table does not exist");
        return;
    }
    if(uniqueTableName(newName)) {
        table.get('.text')[0].setText(newName);
        layer.draw();
    }
    else {
        alert("Table names must be unique.");
    }
}

/*
* Check if table has a primary key
*/
function hasPrimaryKey(tableName) {
    var table = findTable(tableName);
    for(var i = 0; i < table.attr.length; i++) {
        var attr = findAttr(attrName, tableName);
        if(attr[3]) {
            return true;
        }
    }
    return false;
}

//TODO Update the stage
/*
* Deletes table from tables array, any connected attributes, and any relations connected to table
*/
function deleteTable(tableName) {
    
    // Deletes connected attributes from attributes table
    for(var i = 0; i < attributes.length; i++) {
        if(attributes[i][1].get('.text')[0].getText().toLowerCase() == tableName.toLowerCase()) {
            attributes.splice(i, 1);
        }
    }
    
    // Deletes relations connected with table
     for(var i = 0; i < relations.length; i++) {
         if((relations[i][1].get('.text')[0].getText().toLowerCase() == tableName.toLowerCase()) ||
            (relations[i][2].get('.text')[0].getText().toLowerCase() == tableName.toLowerCase())) {
             relations.splice(i,1);
         }
         
     }
    
    // Delete table from tables array
    for(var i = 0; i < tables.length; i++) {
        if(tables[i].get('.text')[0].getText().toLowerCase() == tableName.toLowerCase()) {
            tables.splice(i, 1);
            break;
        }
    }
}


/********* Attribute Functions *********/

/*
* Checks  for unique attribute name within a table
*/
function uniqueAttribute(attrName, tableName) {
    var table = findTable(tableName);
    if(table.attr.indexOf(attrName) > -1) {
        return false;
    }
    return true;
}

/*
* Finds the provided attribute based on its name and table name
*/
function findAttr(attrName, tableName) {
    for(var i = 0; i < attributes.length; i++) {
        if((attributes[i][0].get('.Atext')[0].getText().toLowerCase() == attrName) &&
            (attributes[i][1].get('.text')[0].getText().toLowerCase() == tableName)) {
            return attributes[i];
        }
    }
    return null;
}

/*
* Modifies the existing attribute name to the provided attribute name
*/
function editAttrName(oldAttrName, newAttrName, tableName) {
    var attr = findAttr(oldAttrName, tableName);
    var table = findTable(tableName);
    attr[0].get('.Atext')[0].setText(newAttrName);
    for(var i = 0; i < table.attr.length; i++) {
        if(table.attr[i] == oldAttrName) {
            table.attr[i] = newAttrName;
        }
    }
    layer.draw();
}

/*
* Modifies the existing attribute datatype to the provided attribute datatype
*/
function editAttrType(attrName, tableName, newAttrType) {
    var attr = findAttr(tableName, attrName);
    attr[2] = newAttrType;
}

/*
* Modifies the primary key status of provided attribute if possible
*/
function editAttrPrimary(attrName, tableName) {
    var attr = findAttr(tableName, oldAttrName);
    if(attr[3]) {
        attr[3] = false;
    }
    else {
        if(hasPrimaryKey(tableName)) {
            alert('Already has primary key');
        } else {
            attr[3] = true;
        }
    }
}

//TODO Update the stage
/*
 * Deletes Attribute from attributes and the connected table
 */
function deleteAttribute(attrName, tableName) {
    //Deletes attribute from table
    for(var i = 0; i < tables.length; i++) {
        if(tables[i].get('.text')[0].getText().toLowerCase() == tableName.toLowerCase()) {
            var table = tables[i];
            for(var j = 0; j < table.attr.length; j++) {
                if(table.attr[j].toLowerCase() == attrName.toLowerCase()) {
                    table.attr.splice(j, 1);
                }
            }
        }
    }
    
    // Deletes attribute from attributes array
    for(var i = 0; i < attributes.length; i++) {
        if((attributes[i][0].get('.Atext')[0].getText().toLowerCase() == attrName.toLowerCase()) &&
            (attributes[i][1].get('.text')[0].getText().toLowerCase() == tableName.toLowerCase())) {
            attributes.splice(i, 1);
        }
    }
}

/********* Relation Functions *********/

/*
* Finds the provided relation based on its name
*/
function findRelation(relName) {
    for(var i = 0; i < relations.length; i++) {
        if(relations[i][0].getName().toLowerCase() == relName.toLowerCase()) {
            return relations[i];
        }
    }
    return null;
}

/*
* Modifies the existing relation name to the provided relation name
*/
function editRelationName(oldRelName, newRelName) {
    var rel = findRelation(oldRelName);
    rel[0].setName(newRelName);
}

/*
* Modifies the existing relation type to the provided relation type
*/
function editRelationType(relName, newRelType) {
    var rel = findRelation(relName);
    rel[3] = newRelType;
}

//TODO Update the stage
/*
 * Deletes relation from relations array
 */
function deleteRelation(relName) {
    for(var i = 0; i < relations.length; i++) {
        if(relations[i][0].getName().toLowerCase() == relName.toLowerCase()) {
            relations.splice(i, 1);
        }
    }
}


/*
* Converts xml schema into current schema
*/
function convert(schema) {
   return false;   
}

/********* HTML Helper Functions *********/

/*
* Generates HTML to dynamically populate selectors 
* from dynamic data structures
*/
function genSelectInnerHTML(id, arr, type) {
  var ret = "";
  if(type != 1) { // simple arrays
    for(i=0; i<arr.length; i++) {
      ret += "\t<option value=\"" + arr[i] + "\">" + arr[i] + "</option>\n";
    }
  }
  else { // tables array
    for(i=0; i<arr.length; i++) {
      ret += "\t<option value=\"" + arr[i].get('.text')[0].getText() + "\">" + arr[i].get('.text')[0].getText() + "</option>\n";
    }
  }
  document.getElementById(id).innerHTML = ret;
}

/*
* Returns value at current selcted index from HTML selector
*/
function getSelectVal(select) {
  return select.options[select.selectedIndex].value;
}

/*
* Initializes modal to create new table
*/
function initNewTable() {
}

/*
* Saves new table if valid info from modal
*/
function saveNewTable(e) {
  var tableName = document.getElementById("newTableName").value;
  if(tableName.value != "") {
    $('#newTableModal').modal('hide'); // hide modal on save
    if(uniqueTableName(tableName)) {
      createTable(tableName);
    }
    else {
      alert("Table names must be unique.");
    }
  }
}

/*
* Initializes modal to create new attribute
*/
function initNewAttr() {
  genSelectInnerHTML("tableNameA", tables, 1);
  genSelectInnerHTML("newAttrType", datatypes, 0);
}

/*
* Saves new attribute if valid info from modal
*/
function saveNewAttr(e) {
  var tableName = getSelectVal(document.getElementById("tableNameA"));
  var attrName = document.getElementById("newAttrName").value;
  var attrType = getSelectVal(document.getElementById("newAttrType"));
  if(attrName != "") {
    $('#newAttributeModal').modal('hide'); // hide modal on save
    createAttr(attrName, attrType, tableName);
  }
}

/*
* Initializes modal to edit existing table
*/
function initEditTable() {
  genSelectInnerHTML("oldTableName", tables, 1);
}

/*
* Saves changes to table if valid info from modal
*/
function saveEditTable(e) {
  var oldTableName = getSelectVal(document.getElementById("oldTableName"));
  var newTableName = document.getElementById("editTableName").value;
  if(newTableName != "") {
    $('#editTableModal').modal('hide'); // hide modal on save
    editTableName(oldTableName, newTableName);
  }
}

/*
* Initializes modal to edit existing attribute
*/
function initEditAttr() {
  genSelectInnerHTML("tableNameB", tables, 1);
  // set invalid default index to ensure event is triggered later
  document.getElementById("tableNameB").selectedIndex = -1;
  genSelectInnerHTML("editAttrType", datatypes, 0);
}

/*
* Updates attribute list based on table selection within modal
*/
function genAttrList(id1, id2) {
  var attrs = new Array();
  var tname = getSelectVal(document.getElementById(id1));
  var table = findTable(tname);
  for(i=0; i<table.attr.length; i++) {
    attrs.push(table.attr[i]);
  }
  genSelectInnerHTML(id2, attrs, 0);
}

/*
* Saves changes to attribute if valid info from modal
*/
function saveEditAttr(e) {
  var tableName = getSelectVal(document.getElementById("tableNameB"));
  var oldAttrName = getSelectVal(document.getElementById("oldAttrName"));
  var newAttrName = document.getElementById("editAttrName").value;
  var newAttrType = getSelectVal(document.getElementById("editAttrType"));
  if(newAttrName != "") {
    $('#editAttributeModal').modal('hide'); // hide modal on save
    editAttrName(oldAttrName, newAttrName, tableName);
    editAttrType(newAttrName, tableName, newAttrType);
  }
}

/*
* Initializes modal to delete existing table
*/
function initDelTable() {
  genSelectInnerHTML("delTableName", tables, 1);
}

/*
* Deletes table specified by modal
*/
function deleteTable(e) {
  var tableName = getSelectVal(document.getElementById("delTableName"));
  if(tableName != "") {
    $('#deleteTableModal').modal('hide'); // hide modal on save
    alert('Delete table: ' + tableName);
  }
}

/*
* Initializes modal to delete existing attribute
*/
function initDelAttr() {
  genSelectInnerHTML("tableNameC", tables, 1);
  document.getElementById("tableNameC").selectedIndex = -1;
}

/*
* Deletes attribute specified by modal
*/
function deleteAttr(e) {
  var tableName = getSelectVal(document.getElementById("tableNameC"));
  var attrName = getSelectVal(document.getElementById("delAttrName"));
  if(tableName != "" && attrName != "") {
    $('#deleteAttributeModal').modal('hide'); // hide modal on save
    alert('Delete attribute: ' + tableName + '.' + attrName);
  }
}

/*
* Initializes modal to create new relation
*/
function initNewRelation() {
  genSelectInnerHTML("tableNameR1", tables, 1);
  genSelectInnerHTML("tableNameR2", tables, 1);
}

/*
* Saves new relation if valid info from modal
*/
function saveNewRelation(e) {
  var relName = document.getElementById("relNameA").value;
  var tableName1 = getSelectVal(document.getElementById("tableNameR1"));
  var tableName2 = getSelectVal(document.getElementById("tableNameR2"));
  if(relName != "") {
    $('#newRelationModal').modal('hide'); // hide modal on save
    createRelation(relName, tableName1, tableName2);
  }
}

/*
* Initializes modal to delete existing relation
*/
function initDelRelation() {
  genSelectInnerHTML("relNameB", relations, 1);
}

/*
* Deletes relation specified by modal
*/
function deleteRelation(e) {
  var relName = document.getElementById("relNameB").value;
  if(relName != "") {
    $('#deleteRelationModal').modal('hide'); // hide modal on save
    alert('Delete relation: ' + relName);
  }
}
</script>

  <!-- newTableModal -->
  <div id="newTableModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="newTableModalLabel" aria-hidden="true">
    <div class="modal-header">
      <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
      <h3 id="newTableModalLabel">Create new table</h3>
    </div>
    <div class="modal-body">
      <label for="newTableName"><strong>Table name</strong></label>
      <input type="text" id="newTableName" value="">
    </div>
    <div class="modal-footer">
      <button class="btn" data-dismiss="modal">Close</button>
      <button id="newTableBtn" class="btn btn-primary" onclick="saveNewTable()">Save table</button>
    </div>
  </div>

  <!-- newAttributeModal -->
    <div id="newAttributeModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="newAttributeModalLabel" aria-hidden="true">
    <div class="modal-header">
      <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
      <h3 id="newAttributeModalLabel">Create new attribute</h3>
    </div>
    <div class="modal-body">
      <label for="tableNameA"><strong>Table name</strong></label>
      <select id="tableNameA">
      </select>
      <label for="newAttrName"><strong>Attribute name</strong></label>
      <input type="text" id="newAttrName" value="">
      <label for="newAttrType"><strong>Attribute type</strong></label>
      <select id="newAttrType">
      </select>
    </div>
    <div class="modal-footer">
      <button class="btn" data-dismiss="modal">Close</button>
      <button id="newAttrBtn" class="btn btn-primary" onclick="saveNewAttr()">Save attribute</button>
    </div>
  </div>

  <!-- editTableModal -->
  <div id="editTableModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="editTableModalLabel" aria-hidden="true">
    <div class="modal-header">
      <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
      <h3 id="editTableModalLabel">Edit table</h3>
    </div>
    <div class="modal-body">
      <label for="oldTableName"><strong>Table name</strong></label>
      <select id="oldTableName">
      </select>
      <label for="editTableName"><strong>New table name</strong></label>
      <input type="text" id="editTableName" value="">
    </div>
    <div class="modal-footer">
      <button class="btn" data-dismiss="modal">Close</button>
      <button id="editTableBtn" class="btn btn-primary" onclick="saveEditTable()">Save changes</button>
    </div>
  </div>

  <!-- editAttributeModal -->
  <div id="editAttributeModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="editAttributeModalLabel" aria-hidden="true">
    <div class="modal-header">
      <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
      <h3 id="editAttributeModalLabel">Edit attribute</h3>
    </div>
    <div class="modal-body">
      <label for="tableNameB"><strong>Table name</strong></label>
      <select id="tableNameB" onchange="genAttrList('tableNameB', 'oldAttrName')">
      </select>
      <label for="oldAttrName"><strong>Current attribute name</strong></label>
      <select id="oldAttrName">
      </select>
      <label for="editAttrName"><strong>New attribute name</strong></label>
      <input type="text" id="editAttrName" value="">
      <label for="editAttrType"><strong>Attribute type</strong></label>
      <select id="editAttrType">
      </select>
    </div>
    <div class="modal-footer">
      <button class="btn" data-dismiss="modal">Close</button>
      <button id="editAttrBtn" class="btn btn-primary" onclick="saveEditAttr()">Save changes</button>
    </div>
  </div>

  <br />
  <div class="row">  
 
  <!-- deleteTableModal -->
  <div id="deleteTableModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="deleteTableModalLabel" aria-hidden="true">
    <div class="modal-header">
      <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
      <h3 id="deleteTableModalLabel">Delete table</h3>
    </div>
    <div class="modal-body">
      <label for="delTableName"><strong>Table name</strong></label>
      <select id="delTableName">
      </select>
    </div>
    <div class="modal-footer">
      <button class="btn" data-dismiss="modal">Close</button>
      <button id="delTableBtn" class="btn btn-danger" onclick="deleteTable()">Delete table</button>
    </div>
    </div>

    <!-- deleteAttributeModal -->
    <div id="deleteAttributeModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="deleteAttributeModalLabel" aria-hidden="true">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
        <h3 id="deleteAttributeModalLabel">Delete attribute</h3>
      </div>
      <div class="modal-body">
        <label for="tableNameC"><strong>Table name</strong></label>
        <select id="tableNameC" onchange="genAttrList('tableNameC', 'delAttrName')">
        </select>
        <label for="delAttrName"><strong>Attribute name</strong></label>
        <select id="delAttrName">
        </select>
      </div>
      <div class="modal-footer">
        <button class="btn" data-dismiss="modal">Close</button>
        <button id="delAttrBtn" class="btn btn-danger" onclick="deleteAttr()">Delete attribute</button>
      </div>
    </div>

  <!-- newRelationModal -->
  <div id="newRelationModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="newRelationModalLabel" aria-hidden="true">
    <div class="modal-header">
      <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
      <h3 id="newRelationModalLabel">Connect tables</h3>
    </div>
    <div class="modal-body">
      <label for="relNameA"><strong>Relation name</strong></label>
      <input type="text" id="relNameA" value="">
      <label for="tableNameR1"><strong>Table name #1</strong></label>
      <select id="tableNameR1">
      </select>
      <label for="tableNameR2"><strong>Table name #2</strong></label>
      <select id="tableNameR2">
      </select>
    </div>
    <div class="modal-footer">
      <button class="btn" data-dismiss="modal">Close</button>
      <button id="newRelBtn" class="btn btn-primary" onclick="saveNewRelation()">Save relation</button>
    </div>
    </div>

    <!-- deleteRelationModal -->
    <div id="deleteRelationModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="deleteRelationModalLabel" aria-hidden="true">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
        <h3 id="deleteRelationModalLabel">Delete attribute</h3>
      </div>
      <div class="modal-body">
        <label for="relNameB"><strong>Relation name</strong></label>
        <input type="text" id="relNameB" value="">
      </div>
      <div class="modal-footer">
        <button class="btn" data-dismiss="modal">Close</button>
        <button id="delRelBtn" class="btn btn-danger" onclick="deleteRelation()">Delete relation</button>
      </div>
    </div>

    <!-- table info display -->
    <div class="span8">
      <table class= "table table-bordered">
        <tr>
          <td>Table Name: </td>
          <td><div id="name">None</div></td>
        </tr>
        <tr>
          <td>Attributes: </td>
          <td><div id="attribute">None</div></td>
        </tr>
      </table>
    </div>

    <!-- GUI buttons -->
    <div class="span4">
      <a data-toggle="modal" href="#newTableModal" class="btn btn-primary" onclick="initNewTable()">New table</a>
      <a data-toggle="modal" href="#editTableModal" class="btn btn-warning" onclick="initEditTable()">Edit table</a>
      <a data-toggle="modal" href="#deleteTableModal"  class="btn btn-danger" onclick="initDelTable()">Delete table</a>
      <br /><br />
      <a data-toggle="modal" href="#newAttributeModal" class="btn btn-primary" onclick="initNewAttr()">New attribute</a>
      <a data-toggle="modal" href="#editAttributeModal" class="btn btn-warning" onclick="initEditAttr()">Edit attribute</a>
      <a data-toggle="modal" href="#deleteAttributeModal" class="btn btn-danger" onclick="initDelAttr()">Delete attribute</a>
      <br /><br />
      <a data-toggle="modal" href="#newRelationModal" class="btn btn-success" onclick="initNewRelation()">Connect tables</a>
      <a data-toggle="modal" href="#deleteRelationModal" class="btn btn-warning" onclick="initDelRelation()">Disconnect tables</a>
    </div>

  </div>

</div>
