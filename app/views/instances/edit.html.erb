<!-- Navbar -->
<div class="navbar navbar-fixed-top">
  <div class="navbar-inner">
    <div class="container-fluid">
      <!-- .btn-navbar is used as the toggle for collapsed navbar content -->
      <a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </a>
      <a href="/users" class="brand">SIQL</a>
      <div class="nav-collapse collapse">
        <div class="nav pull-right">
          <li class="divider-vertical"></li>
        <li class="dropdown">
          <a href="#" class="dropdown-toggle" data-toggle="dropdown">
            <b class="caret"></b>
          </a>
          <ul class="dropdown-menu">
            <li>
              <a href="##">Help</a>
            </li>
            <li>
              <%= link_to 'Logout', destroy_user_session_path, method: :delete %>
            </li>
        </li>
        </div>
      </div>
    </div> <!--/.container-fluid -->
  </div> <!--/.navbar-inner -->
</div> <!--/.navbar-fixed-top -->

<br />
<br />
<div class="page-header">
  <h1>Database Creation</h1>
</div>
<div class="container">
  <div class="row-fluid">
    <div class="span3">
      <select id="schemaSelect">
        <option>Select Base Schema</option>
        <option>Teacher-Student</option>
        <option>Employee-Department</option>
        <option>Author-Book-Category</option>
        <option>Advisor-Student</option>
      </select>
    </div>
    <div class="span2">
      <button class="btn btn-info btn-small" onClick="testJSON()">Load Schema</button>
    </div>

    <div class="offset9">
      <p><a href="#controlModal" data-toggle="modal"><small>Keyboard/Mouse Controls  </small></a><i class="icon-book"></i></p>

      <!-- Modal -->
      <div id="controlModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-header">
          <button type="button" class="close" data-dismiss="modal" aria-hidden="true">Ã—</button>
          <h5 id="myModalLabel">Keyboard/Mouse Controls</h5>
        </div>
        <div class="modal-body">
          <h6>Keyboard Controls</h6>
          <p><i class="icon-arrow-left"></i>   <small>Move diagram view to the left</small></p>
          <p><i class="icon-arrow-right"></i>   <small>Move diagram view to the right</small></p>
          <p><i class="icon-arrow-up"></i>   <small>Move diagram view up</small></p>
          <p><i class="icon-arrow-down"></i>   <small>Move diagram view down</small></p>

          <h6>Mouse Controls</h6>
          <p><i class="icon-move"></i><small>Zoom in by scrolling down or left. Zoom out by scrolling up or right.</small></p>
        </div>
      </div>
    </div>
  </div>
  <!-- <div class="offset9">
    <div class="row-fluid">
      <div class="span7">
          <h5>Invert Arrow Keys</h5>
      </div>
      <div class="span1">
        <input id="invControls" onClick="onInvControls()" type="checkbox" style="float-right" checked>
      </div>
    </div>
  </div>-->
  <br />
  <div id="container"></div>
  <script src="http://www.html5canvastutorials.com/libraries/kinetic-v4.3.0-beta2.js"></script>
  <script type="text/javascript">

/********* File Reader JQuery *********/

var csv = '';

$(document).ready(function() {
  $('#csvfile').change(function(e){
    $('#testSubfile').val($(this).val().replace("C:\\fakepath\\", ""));
    if (e.target.files != undefined) {
      var reader = new FileReader();
      reader.onload = function(e) {
        csv = e.target.result;
      };
      reader.readAsText(e.target.files.item(0));
    }
    return false;

  });
});


$(document).ready(function() {
  convertFromJSON(JSONObj);

});

/********* Global Variables *********/

// ID of the instance
var dbInstance = '<%="#{@instance.name}"%>';

// Control inversion
var invert = true;

// Position of current object
var x, y;

// List of tables
tables = new Array();

// List of allowable data types
datatypes = new Array("text", "number", "date");

// List of allowable relation types
reltypes = new Array("undefined", "one-to-one", "many-to-many");

// List of attributes
attributes = new Array();

// List of attribute lines
attrLines = new Array();

// List of Relations
relations = new Array();

// Graphics variables
var stage = new Kinetic.Stage({
    container: 'container',
    width: 1150,
    height: 500 });
//var layer = new Kinetic.Layer();
var currGroup = new Kinetic.Group();

// Finalization variable
var finalizeIdx = 0;
var finalizeArr = 1;

// Viewport
var viewport = new Viewport(stage);

// JSON obj
var JSONObj = '<%=@instance.db_json%>';


var book = { "tables" : [{ "name" : "Book" , "xval" : "463" , "yval" : "137" , "attributes" : [{ "name" : "b_id" , "dataType" : "INTEGER" , "primary" : "true" , "notnull" : "false" , "unique" : "false" , "xval" : "335" , "yval" : "81" }, { "name" : "title" , "dataType" : "VARCHAR(256)" , "primary" : "false" , "notnull" : "true" , "unique" : "false" , "xval" : "444" , "yval" : "74" }, { "name" : "isbn" , "dataType" : "VARCHAR(256)" , "primary" : "false" , "notnull" : "false" , "unique" : "false" , "xval" : "534" , "yval" : "72" }, { "name" : "publish_date" , "dataType" : "DATETIME" , "primary" : "false" , "notnull" : "false" , "unique" : "false" , "xval" : "637" , "yval" : "65" }]}, { "name" : "Author" , "xval" : "148" , "yval" : "315" , "attributes" : [{ "name" : "a_id" , "dataType" : "INTEGER" , "primary" : "true" , "notnull" : "false" , "unique" : "false" , "xval" : "41" , "yval" : "395" }, { "name" : "name" , "dataType" : "VARCHAR(256)" , "primary" : "false" , "notnull" : "false" , "unique" : "false" , "xval" : "21" , "yval" : "315" }]}, { "name" : "Category" , "xval" : "766" , "yval" : "328" , "attributes" : [{ "name" : "c_id" , "dataType" : "INTEGER" , "primary" : "true" , "notnull" : "false" , "unique" : "false" , "xval" : "1006" , "yval" : "298" }, { "name" : "name" , "dataType" : "VARCHAR(256)" , "primary" : "false" , "notnull" : "true" , "unique" : "false" , "xval" : "940" , "yval" : "400" }]}], "relations" : [{ "name" : "Auth_Book" , "xval" : "337" , "yval" : "215" , "attributes" : [{ "name" : "a_id", "table" : "author"}, { "name" : "b_id", "table" : "Book"}]}, { "name" : "Cat_Book" , "xval" : "652" , "yval" : "216" , "attributes" : [{ "name" : "c_id", "table" : "Category"}, { "name" : "b_id", "table" : "Book"}]}], "viewport" : { "updateX" : "0", "updateY" : "0", "scale" : "1"} }

var ed = { "tables" : [{ "name" : "Employee" , "xval" : "192" , "yval" : "223" , "attributes" : [{ "name" : "name" , "dataType" : "VARCHAR(256)" , "primary" : "false" , "notnull" : "true" , "unique" : "false" , "xval" : "38" , "yval" : "281" }, { "name" : "e_id" , "dataType" : "INTEGER" , "primary" : "true" , "notnull" : "false" , "unique" : "false" , "xval" : "22" , "yval" : "176" }, { "name" : "start_date" , "dataType" : "DATETIME" , "primary" : "false" , "notnull" : "true" , "unique" : "false" , "xval" : "67" , "yval" : "356" }, { "name" : "salary" , "dataType" : "INTEGER" , "primary" : "false" , "notnull" : "true" , "unique" : "false" , "xval" : "224" , "yval" : "377" }]}, { "name" : "Department" , "xval" : "707" , "yval" : "110" , "attributes" : [{ "name" : "dep_no" , "dataType" : "INTEGER" , "primary" : "true" , "notnull" : "false" , "unique" : "false" , "xval" : "904" , "yval" : "43" }, { "name" : "dep_name" , "dataType" : "VARCHAR(256)" , "primary" : "false" , "notnull" : "true" , "unique" : "false" , "xval" : "894" , "yval" : "179" }]}], "relations" : [{ "name" : "dep_emp" , "xval" : "499" , "yval" : "176" , "attributes" : [{ "name" : "e_id", "table" : "Employee"}, { "name" : "dep_no", "table" : "Department"}]}], "viewport" : { "updateX" : "0", "updateY" : "0", "scale" : "1"} }

var ts = { "tables" : [{ "name" : "Teacher" , "xval" : "180" , "yval" : "250" , "attributes" : [{ "name" : "tid" , "dataType" : "INTEGER" , "primary" : "true" , "notnull" : "false" , "unique" : "false" , "xval" : "40" , "yval" : "248" }, { "name" : "name" , "dataType" : "VARCHAR(256)" , "primary" : "false" , "notnull" : "true" , "unique" : "false" , "xval" : "56" , "yval" : "308" }]}, { "name" : "Student" , "xval" : "720" , "yval" : "248" , "attributes" : [{ "name" : "sid" , "dataType" : "INTEGER" , "primary" : "true" , "notnull" : "false" , "unique" : "false" , "xval" : "942" , "yval" : "212" }, { "name" : "name" , "dataType" : "VARCHAR(256)" , "primary" : "false" , "notnull" : "true" , "unique" : "false" , "xval" : "926" , "yval" : "294" }]}], "relations" : [{ "name" : "Teaches" , "xval" : "450" , "yval" : "216" , "attributes" : [{ "name" : "tid", "table" : "Teacher"}, { "name" : "sid", "table" : "Student"}]}], "viewport" : { "updateX" : "0", "updateY" : "0", "scale" : "1"}};

var tsu = { "tables" : [{ "name" : "Teacher" , "xval" : "180" , "yval" : "250" , "attributes" : [{ "name" : "teacher_id" , "dataType" : "INTEGER" , "primary" : "false" , "notnull" : "false" , "unique" : "false" , "xval" : "40" , "yval" : "248" }, { "name" : "name" , "dataType" : "VARCHAR(256)" , "primary" : "false" , "notnull" : "false" , "unique" : "false" , "xval" : "56" , "yval" : "308" }]}, { "name" : "Student" , "xval" : "720" , "yval" : "248" , "attributes" : [{ "name" : "student_id" , "dataType" : "INTEGER" , "primary" : "false" , "notnull" : "false" , "unique" : "false" , "xval" : "942" , "yval" : "212" }, { "name" : "name" , "dataType" : "VARCHAR(256)" , "primary" : "false" , "notnull" : "false" , "unique" : "false" , "xval" : "926" , "yval" : "294" }]}], "relations" : [{ "name" : "Teaches" , "xval" : "450" , "yval" : "216" , "attributes" : [{ "name" : "id", "table" : "Teacher"}, { "name" : "id", "table" : "Student"}]}], "viewport" : { "updateX" : "0", "updateY" : "0", "scale" : "1"}};

var test = { "tables" : [{ "name" : "testMe" , "xval" : "895" , "yval" : "385" , "attributes" : []}], "relations" : [], "viewport" : { "updateX" : "370", "updateY" : "160", "scale" : "1"} };

var ta = { "tables" : [{ "name" : "Advisor" , "xval" : "237" , "yval" : "165" , "attributes" : [{ "name" : "aid" , "dataType" : "INTEGER" , "primary" : "true" , "notnull" : "false" , "unique" : "false" , "xval" : "109" , "yval" : "164" }, { "name" : "name" , "dataType" : "VARCHAR(256)" , "primary" : "false" , "notnull" : "false" , "unique" : "false" , "xval" : "158" , "yval" : "243" }, { "name" : "office" , "dataType" : "VARCHAR(256)" , "primary" : "false" , "notnull" : "false" , "unique" : "false" , "xval" : "291" , "yval" : "282" }]}, { "name" : "Student" , "xval" : "690" , "yval" : "193" , "attributes" : [{ "name" : "sid" , "dataType" : "INTEGER" , "primary" : "true" , "notnull" : "false" , "unique" : "false" , "xval" : "840" , "yval" : "80" }, { "name" : "name" , "dataType" : "VARCHAR(256)" , "primary" : "false" , "notnull" : "false" , "unique" : "false" , "xval" : "936" , "yval" : "158" }, { "name" : "gpa" , "dataType" : "INTEGER" , "primary" : "false" , "notnull" : "false" , "unique" : "false" , "xval" : "914" , "yval" : "242" }, { "name" : "credits" , "dataType" : "INTEGER" , "primary" : "false" , "notnull" : "false" , "unique" : "false" , "xval" : "695" , "yval" : "290" }, { "name" : "graduation" , "dataType" : "INTEGER" , "primary" : "false" , "notnull" : "false" , "unique" : "false" , "xval" : "820" , "yval" : "304" }]}], "relations" : [{ "name" : "Advises" , "xval" : "501" , "yval" : "163" , "attributes" : [{ "name" : "aid", "table" : "Advisor"}, { "name" : "sid", "table" : "Student"}]}], "viewport" : { "updateX" : "30", "updateY" : "30", "scale" : "1"} };


/********* Creation Methods *********/

/*
* Creates table
* Note: Check table name is unique before calling.
*/
function createTable(tableName, rectX, rectY) {

    var group = new Kinetic.Group({
        draggable: true
    });

    var complexText = new Kinetic.Text({
        name: 'text',
        x: rectX,
        y: rectY,
        text: tableName,
        fontSize: 16,
        fontFamily: 'Calibri',
        fill: 'white',
        width: 160,
        padding: 20,
        align: 'center',
    });

    var rect = new Kinetic.Rect({
        name: 'shape',
        x: rectX,
        y: rectY,
        stroke: 'black',
        strokeWidth: 4,
        fill: 'mediumblue',
        width: 160,
        height: complexText.getHeight(),
        shadowColor: 'black',
        shadowBlur: 10,
        shadowOffset: [10, 10],
        shadowOpacity: 0.2,
        cornerRadius: 10
    });

    // Add Elements to group
    group.add(rect);
    group.add(complexText);

    // Adds an empty attributes and neighbors array
    group.attr = new Array();
    group.neighbors = new Array();

    // Add original x and y positions
    group.origX = rectX;
    group.origY = rectY;

    // Event handling
    group.on('mouseover', function() {
        document.body.style.cursor = 'pointer';
    });
    group.on('mouseout', function() {
        document.body.style.cursor = 'default';
    });
    group.on('mousedown', function() {
        if(currGroup.getChildren().length > 0) {
            currGroup.get('.shape')[0].setStroke('black');
        }
        currGroup = group;
        document.getElementById('nameTitle').innerHTML = 'Table Name: ';
        document.getElementById('name').innerHTML = group.get('.text')[0].getText();
        group.get('.shape')[0].setStroke('lightsteelblue');

        var attrs = '';
        if(group.attr.length == 0) {
            attrs = 'None';
        } else {
            for (var i = 0; i < group.attr.length; i++) {
                attrs = attrs + group.attr[i];
                if((i + 1) < group.attr.length) {
                    attrs = attrs + ', ';
                } else {
                    attrs = attrs + ' ';
                }
            }
        }
        document.getElementById('attributeTitle').innerHTML = 'Attributes: ';
        document.getElementById('attribute').innerHTML = attrs;
    });

    group.on('dragstart dragmove', function(){
        update();
    });

    //Add group to table array
    tables.push(group);

    //Add group to stage
    //layer.add(group);
    //stage.add(layer);
    viewport.add(group,1150);
    viewport.draw();
}

/*
* Creates attribute
*/
function createAttr(name, type, tableName, primary, notNull, unique, rectX, rectY) {

    var table = findTable(tableName);
    if(table == null) {
        alert('Table not found.');
        return;
    }
    if(!uniqueAttrName(name, tableName)) {
        alert('Attributes within a table must be unique.');
        return;
    }

    if (hasPrimaryKey(tableName) && (primary == true)) {
        alert('Table already contains Primary Attribute');
        return;
    }

    var group = new Kinetic.Group({draggable: true});

    var complexText = new Kinetic.Text({
       name: 'Atext',
       x: rectX,
       y: rectY,
       text: name,
       fontSize: 14,
       fontFamily: 'Calibri',
       fill: 'white',
       width: 80,
       padding: 20,
       align: 'center'
    });

    var rect = new Kinetic.Rect({
      name: 'shape',
      x: rectX,
      y: rectY,
      stroke: 'black',
      strokeWidth: 4,
      fill: 'orangered',
      width: 80,
      height: complexText.getHeight(),
      shadowColor: 'black',
      shadowBlur: 10,
      shadowOffset: [10, 10],
      shadowOpacity: 0.2,
      cornerRadius: 10
    });

    //Add Elements to group
    group.add(rect);
    group.add(complexText);

    // Add original x and y positions
    group.origX = rectX;
    group.origY = rectY;

    //Adding attributes to attribute (AttrGroup, ParentTable, Datatype, PrimaryKey, NotNull, Unique)
    var attGroup = [group, table, type, primary, notNull, unique];

    //Adding attribute to table
    table.attr.push(name);

    // Event handling
    group.on('mouseover', function() {
        document.body.style.cursor = 'pointer';
    });
    group.on('mouseout', function() {
        document.body.style.cursor = 'default';
    });
    group.on('mousedown', function() {
        if(currGroup.getChildren().length > 0) {
            currGroup.get('.shape')[0].setStroke('black');
        }
        currGroup = group;

        document.getElementById('nameTitle').innerHTML = 'Attribute Name: ';
        var name = group.get('.Atext')[0].getText();
        if(attGroup[3]) {
            name = name + ' (Primary Key)';
        } else if (attGroup[4]) {
            name = name + ' (Not Null)';
        } else if (attGroup[5]) {
            name = name + ' (Unique)';
        }
        document.getElementById('name').innerHTML = name;
        group.get('.shape')[0].setStroke('lightsteelblue');

        document.getElementById('attributeTitle').innerHTML = 'Attribute Type: ';
        document.getElementById('attribute').innerHTML = attGroup[2];
    });

    group.on('dragstart dragmove', function(){
        update();
    });

    //Add group to attributes array
    attributes.push(attGroup);

    //Adds connection line
    var line = new Kinetic.Line({
        name: name,
        points: [group.getX()+group.origX+group.getChildren()[0].getWidth()/2-updateX,
                 group.getY()+group.origY+group.getChildren()[0].getHeight()/2-updateY,
                 table.getX()+table.origX+table.getChildren()[0].getWidth()/2-updateX,
                 table.getY()+table.origY+table.getChildren()[0].getHeight()/2-updateY],
        stroke: 'black',
        strokeWidth: 2,
        lineCap: 'round',
        lineJoin: 'round'
    });

    var lineGroup = [line, table, group];

    attrLines.push(lineGroup);

    //Add group to stage
    viewport.add(group,1150);
    viewport.add(line,1150, true); // add line to bottom


    viewport.draw();
}

/*
 * Creates Relations
 */
function createRelation(rname, tableArr, relX, relY){

    // Finds the table
    var rType = reltypes[0];
    var rLines = new Array();
    var rTables = new Array();
    for(var i = 0; i < tableArr.length; i++) {
        var currTable = findTable(tableArr[i])
        if(currTable == null) {
          alert('Table not found');
        } else {
          rTables.push(currTable);
        }
    }

    var group = new Kinetic.Group({draggable: true});

    var complexText = new Kinetic.Text({
       name: 'Rtext',
       x: relX,
       y: relY,
       text: rname,
       fontSize: 14,
       fontFamily: 'Calibri',
       fill: 'white',
       width: 80,
       padding: 20,
       align: 'center'
    });

    var ell = new Kinetic.Rect({
      name: 'shape',
      x: relX,
      y: relY,
      stroke: 'black',
      strokeWidth: 4,
      fill: 'green',
      width: 80,
      height: complexText.getHeight(),
      shadowColor: 'black',
      shadowBlur: 10,
      shadowOffset: [10, 10],
      shadowOpacity: 0.2,
      cornerRadius: 10
    });

    //Add Elements to group
    group.add(ell);
    group.add(complexText);

    // Add original x and y positions
    group.origX = relX;
    group.origY = relY;

    // Event handling
    group.on('mouseover', function() {
        document.body.style.cursor = 'pointer';
    });
    group.on('mouseout', function() {
        document.body.style.cursor = 'default';
    });
    group.on('mousedown', function() {
        if(currGroup.getChildren().length > 0) {
            currGroup.get('.shape')[0].setStroke('black');
        }
        currGroup = group;

        document.getElementById('nameTitle').innerHTML = 'Relation Name: ';
        document.getElementById('name').innerHTML = group.get('.Rtext')[0].getText();
        group.get('.shape')[0].setStroke('lightsteelblue');

        document.getElementById('attributeTitle').innerHTML = 'Tables: ';
        var tablesText = '';
        for(var i = 0; i < rTables.length; i++) {
            tablesText = tablesText + rTables[i].get('.text')[0].getText();
            if ((i + 1) < rTables.length) {
                tablesText = tablesText + ', ';
            }
             document.getElementById('attribute').innerHTML = tablesText;
        }
    });

    group.on('dragstart dragmove', function(){
        update();
    });

    //layer.add(group);
    viewport.add(group,1150);

    for(var i = 0; i < rTables.length; i++) {
        var currTable = rTables[i];
        var line = new Kinetic.Line({
            name: rname,
            points: [group.getX()+group.origX+group.getChildren()[0].getWidth()/2-updateX,
                 group.getY()+group.origY+group.getChildren()[0].getHeight()/2-updateY,
                 currTable.getX()+currTable.origX+currTable.getChildren()[0].getWidth()/2-updateX,
                 currTable.getY()+currTable.origY+currTable.getChildren()[0].getHeight()/2-updateY],
            stroke: 'red',
            strokeWidth: 5,
            lineCap: 'round',
            lineJoin: 'round'
        });
        rLines.push(line);
        //layer.add(line);
        viewport.add(line,1150,true); // add line to bottom
        //line.moveToBottom();
    }

    // Adding group of line and tables to realtions array (Line obj, FirstTable, SecondTable, Directionality)
    // 'undefined', 'one-to-one', 'many-to-many'
    var currRelation = [group, rLines, rTables, rType];
    relations.push(currRelation);
    //layer.draw();
    viewport.draw();
}

/*
* Updates all of the lines in the graph
*/
function update() {
    // Updates relation lines
    for(var i = 0; i < relations.length; i++) {
        var rel = relations[i][0];
        var lines = relations[i][1];
        for(var j = 0; j < lines.length; j++) {
            var table = relations[i][2][j];
            var line = lines[j];

            line.setPoints([table.getX()+table.origX+table.getChildren()[0].getWidth()/2-updateX,
                 table.getY()+table.origY+table.getChildren()[0].getHeight()/2-updateY,
                 rel.getX()+rel.origX+rel.getChildren()[0].getWidth()/2-updateX,
                 rel.getY()+rel.origY+rel.getChildren()[0].getHeight()/2-updateY]);

            //layer.draw();
            viewport.draw();
        }
    }

    // Updates attribute lines
    for(var i = 0; i < attrLines.length; i++) {
        var line = attrLines[i][0];
        var table = attrLines[i][1];
        var attr = attrLines[i][2];

        line.setPoints([attr.getX()+attr.origX+attr.getChildren()[0].getWidth()/2-updateX,
                 attr.getY()+attr.origY+attr.getChildren()[0].getHeight()/2-updateY,
                 table.getX()+table.origX+table.getChildren()[0].getWidth()/2-updateX,
                 table.getY()+table.origY+table.getChildren()[0].getHeight()/2-updateY]);
        //layer.draw();
        viewport.draw();
    }
}


/********* Table Functions *********/

/*
* Checks for table with provided name
*/
function findTable(name) {
    for(var i = 0; i < tables.length; i++) {
        if(name.toLowerCase() == tables[i].get('.text')[0].getText().toLowerCase()) {
            return tables[i];
        }
    }
    return null;
}

/*
* Checks for unique table name.
*/
function uniqueTableName(name){
    for(var i = 0; i < tables.length; i++){
        if(name.toLowerCase() == tables[i].get('.text')[0].getText().toLowerCase()) {
            return false;
        }
    }
    return true;
}

/*
 * Modifies the existing table name to the provided table name
 */
function editTableName(oldName, newName) {
    var table = findTable(oldName);
    if(table == null) {
        alert("Table does not exist");
        return;
    }
    if(uniqueTableName(newName)) {
        table.get('.text')[0].setText(newName);
        //layer.draw();
        viewport.draw();
    }
    else {
        alert("Table names must be unique.");
    }
}

/*
 * Check if table has a primary key
 */
function hasPrimaryKey(tableName) {
    var table = findTable(tableName);
    for(var i = 0; i < table.attr.length; i++) {
	    var attrName = table.attr[i];
      var attr = findAttr(attrName, tableName);
      if(attr[3] == true) {
        return true;
      }
    }
    return false;
}

/*
* Check if table has obvious primary key
*/
function obviousPrimaryKey(tableName) {
  if(hasPrimaryKey(tableName)) { return true; }
  var attrs = getAttrs(tableName);
  var i;
  for(i=0; i<attrs.length; i++) {
    if(attrs[i].toLowerCase() == 'id') {
      editAttrPrimary(attrs[i], tableName, true);
      return true;
    }
  }
  return false;
}

/*
 * Returns name of Primary Key
 */
function getPrimaryKey(tableName) {
    var table = findTable(tableName);
    for(var i = 0; i < table.attr.length; i++) {
        var attrName = table.attr[i];
        var attr = findAttr(attrName, tableName);
        if(attr[3]) {
            return attr;
        }
    }
    return null;
}

/*
 * Deletes table from tables array, any connected attributes, and any relations connected to table
 */
function deleteTable(tableName) {
    // Deletes attribute lines from attrLines array
    for(var i = 0; i < attrLines.length; i++) {
        if((attrLines[i][1].get('.text')[0].getText().toLowerCase() == tableName.toLowerCase())) {
          if(attrShow) {
            attrLines[i][0].remove();
          }
          attrLines.splice(i, 1);
	        i--;
        }
    }

    // Deletes connected attributes from attributes table
    for(var i = 0; i < attributes.length; i++) {
        if(attributes[i][1].get('.text')[0].getText().toLowerCase() == tableName.toLowerCase()) {
          if(attrShow) {
            attributes[i][0].remove();
          }
          attributes.splice(i, 1);
	        i--;
        }
    }

    // Deletes relations connected with table
    for (var i = 0; i < relations.length; i++) {
      var found = false;

      // Check if relation contains currentTable
      for (var j = 0; j < relations[i][2].length; j++) {
        var curr = relations[i][2][j];
        if (curr.get('.text')[0].getText().toLowerCase() == tableName.toLowerCase()) {
          found = true;
          break;
        }
      }

      if (found == true) {

        // Remove all relation lines
        for (var j = 0; j < relations[i][1].length; j++) {
          relations[i][1][j].remove();
        }

        // Remove relation table
        relations[i][0].remove();
        relations.splice(i,1);
        i--;
      }
    }

    // Delete table from tables array
    for(var i = 0; i < tables.length; i++) {
        if(tables[i].get('.text')[0].getText().toLowerCase() == tableName.toLowerCase()) {
            tables[i].remove();
            tables.splice(i, 1);
            break;
        }
    }

    //layer.draw();
    viewport.draw();
}


/********* Attribute Functions *********/

/*
* Checks  for unique attribute name within a table
*/
function uniqueAttrName(attrName, tableName) {
    var table = findTable(tableName);
    if(table.attr.indexOf(attrName) > -1) {
        return false;
    }
    return true;
}

/*
* Finds the provided attribute based on its name and table name
*/
function findAttr(attrName, tableName) {
    for(var i = 0; i < attributes.length; i++) {
        if((attributes[i][0].get('.Atext')[0].getText().toLowerCase() == attrName.toLowerCase()) &&
            (attributes[i][1].get('.text')[0].getText().toLowerCase() == tableName.toLowerCase())) {
            return attributes[i];
        }
    }
    return null;
}

/*
* Modifies the existing attribute name to the provided attribute name
*/
function editAttrName(oldAttrName, newAttrName, tableName) {
    var attr = findAttr(oldAttrName, tableName);
    var table = findTable(tableName);
    attr[0].get('.Atext')[0].setText(newAttrName);
    for(var i = 0; i < table.attr.length; i++) {
        if(table.attr[i] == oldAttrName) {
            table.attr[i] = newAttrName;
        }
    }
    //layer.draw();
    viewport.draw();
}

/*
* Modifies the existing attribute datatype to the provided attribute datatype
*/
function editAttrType(attrName, tableName, newAttrType) {
    var attr = findAttr(attrName, tableName);
    if(attr[2] != newAttrType) {
        attr[2] = newAttrType;
	return true;
    }
    else
        return false;
}

/*
* Modifies the primary key status of provided attribute if possible
*/
function editAttrPrimary(attrName, tableName, primary) {
    var attr = findAttr(attrName, tableName);
    // case 1: update, [true->false]
    if(attr[3] && !primary) {
	attr[3] = false;
	return true;
    }
    // case 2: update if possible, [false->true]
    else if(!attr[3] && primary) {
        if(hasPrimaryKey(tableName)) {
	    attr[3] = false;
            alert('This table already has a primary key');
	    return false;
        } else {
            attr[3] = true;
	    return true;
        }
    }
    // case 3: no change, [true->true] or [false->false]
    else {
      return false;
    }
}

/*
* Modifies the not null status of provided attribute if possible
*/
function editAttrNotNull(attrName, tableName, notNull) {
    var attr = findAttr(attrName, tableName);
    // check if this action makes sense
    if(attr[3]) { // primary key is already not null
        attr[4] = false;
        return false;
    }
    // case 1: update, [true->false]
    if(attr[4] && !notNull) {
	attr[4] = false;
	return true;
    }
    // case 2: update if possible, [false->true]
    else if(!attr[4] && notNull) {
	attr[4] = true;
	return true;
    }
    // case 3: no change, [true->true] or [false->false]
    else {
      return false;
    }
}

/*
* Modifies the unique key status of provided attribute if possible
*/
function editAttrUnique(attrName, tableName, unique) {
    var attr = findAttr(attrName, tableName);
    // check if this action makes sense
    if(attr[3]) { // primary key is already not null
        attr[5] = false;
        return false;
    }
    // case 1: update, [true->false]
    if(attr[5] && !unique) {
	attr[5] = false;
	return true;
    }
    // case 2: update if possible, [false->true]
    else if(!attr[5] && unique) {
        attr[5] = true;
        return true;
    }
    // case 3: no change, [true->true] or [false->false]
    else {
      return false;
    }
}

/*
 * Deletes Attribute from attributes and the conneted table
 */
function deleteAttribute(attrName, tableName) {
    //Deletes attribute from table
    for(var i = 0; i < tables.length; i++) {
        if(tables[i].get('.text')[0].getText().toLowerCase() == tableName.toLowerCase()) {
            var table = tables[i];
            for(var j = 0; j < table.attr.length; j++) {
                if(table.attr[j].toLowerCase() == attrName.toLowerCase()) {
                    table.attr.splice(j, 1);
                }
            }
        }
    }

    // Deletes attribute lines from attrLines array
    for(var i = 0; i < attrLines.length; i++) {
        if((attrLines[i][1].get('.text')[0].getText().toLowerCase() == tableName.toLowerCase()) &&
            (attrLines[i][2].get('.Atext')[0].getText().toLowerCase() == attrName.toLowerCase())) {
            attrLines[i][0].remove();
            attrLines.splice(i, 1);
            break;
        }
    }

    // Deletes attribute from attributes array
    for(var i = 0; i < attributes.length; i++) {
        if((attributes[i][0].get('.Atext')[0].getText().toLowerCase() == attrName.toLowerCase()) &&
            (attributes[i][1].get('.text')[0].getText().toLowerCase() == tableName.toLowerCase())) {
            attributes[i][0].remove();
            attributes.splice(i, 1);
            break;
        }
    }

    //layer.draw();
    viewport.draw();
}

/*
 * Shows and hides attributes in graph
 */
function onAttrShow() {
    attrShow = document.getElementById("showAttr").checked;
    viewport.draw();
}

/*
* Checks if attribute name is valid
*/
function validAttrName(attrName) {
  var name = attrName.toLowerCase();
  if(attrName == "sysid") { return false; }
  return true;
}

/********* Relation Functions *********/

/*
* Finds the provided relation based on its name
*/
function findRelation(relName) {
    for(var i = 0; i < relations.length; i++) {
        if(relations[i][0].get('.Rtext')[0].getText().toLowerCase() == relName.toLowerCase()) {
            return relations[i];
        }
    }
    return null;
}

/*
* Modifies the existing relation name to the provided relation name
*/
function editRelationName(oldRelName, newRelName) {
    var rel = findRelation(oldRelName);
    rel[0].get('.Rtext')[0].setText(newRelName);
    viewport.draw();
}

/*
* Modifies the existing relation type to the provided relation type
*/
function editRelationType(relName, newRelType) {
    var rel = findRelation(relName);
    if(rel[3] == newRelType)
      return false;
    else {
      rel[3] = newRelType;
      return true;
    }
}

/*
 * Deletes relation from relations array
 */
function deleteRelation(relName) {
    for(var i = 0; i < relations.length; i++) {
        if(relations[i][0].get('.Rtext')[0].getText().toLowerCase() == relName.toLowerCase()) {
            relations[i][0].remove();
            var lines = relations[i][1];
            for(var j = 0; j < lines.length; j++) {
              lines[j].remove();
            }
            relations.splice(i, 1);
        }
    }

    //layer.draw();
    viewport.draw();
}

/*
 * Checks  for unique relation name
 */
function uniqueRelName(relName) {
    for(var i = 0; i < relations.length; i++) {
        if(relations[i][0].get('.Rtext')[0].getText().toLowerCase() == relName.toLowerCase()) {
            return false;
	   }
    }
    return true;
}

/*
 * Shows and Hides Relations
 */
function onRelShow() {
    relShow = document.getElementById("showRel").checked;
    viewport.draw();
}

/*
 * Invert Controls check
 */
function onInvControls() {
    invert = document.getElementById("invControls").checked;
}

/*
 * Converts schema into JSON schema
 */
function convertToJSON () {
  var txt = '{ "tables" : [';

  // Tables
  for (var i = 0; i < tables.length; i++) {
    var table = tables[i];
    var currXVal = tables[i].getX() + tables[i].origX;
    var currYVal = tables[i].getY() + tables[i].origY;
    txt = txt + '{ "name" : "' + tables[i].get('.text')[0].getText() + '" , "xval" : "' + currXVal + '" , "yval" : "' + currYVal + '" , "attributes" : [';
    // Table Attributes
    for (var j = 0; j < table.attr.length; j++) {
      var attr = findAttr(table.attr[j], tables[i].get('.text')[0].getText());
      var type = '';
      switch(attr[2])
      {
      case 'text':
          type = 'VARCHAR(256)';
          break;
      case 'number':
          type = 'INTEGER';
          break;
      case 'date':
          type = 'DATETIME';
      }
      currXVal = attr[0].getX() + attr[0].origX;
      currYVal = attr[0].getY() + attr[0].origY;
      txt = txt + '{ "name" : "' + table.attr[j] + '" , "dataType" : "' + type + '" , "primary" : "' + attr[3] + '" , "notnull" : "' + attr[4] + '" , "unique" : "' + attr[5] + '" , "xval" : "' + currXVal + '" , "yval" : "' + currYVal + '" }';
      if ((j + 1) < table.attr.length) {
        txt = txt + ', ';
      }
    }
    txt = txt + ']}';
    if ((i + 1) < tables.length) {
      txt = txt + ', ';
    }
  }

  // Relations
  txt = txt + '], "relations" : [';
  for (var i = 0; i < relations.length; i++) {
    var currXVal = relations[i][0].getX() + relations[i][0].origX;
    var currYVal = relations[i][0].getY() + relations[i][0].origY;
    txt = txt + '{ "name" : "' + relations[i][0].get('.Rtext')[0].getText() + '" , "xval" : "' + currXVal + '" , "yval" : "' + currYVal + '" , "attributes" : [';
    for(var j = 0; j < relations[i][2].length; j++) {
      var tableName = relations[i][2][j].get('.text')[0].getText();
      var primary = getPrimaryKey(tableName);
      if (primary != null) {
        /*var type = '';
        switch(primary[2])
        {
        case 'text':
            type = 'VARCHAR(256)';
            break;
        case 'number':
            type = 'INTEGER';
            break;
        case 'date':
            type = 'DATETIME';
        }*/
        txt = txt + '{ "name" : "' + primary[0].get('.Atext')[0].getText() + '", "table" : "' + tableName + '"}';
      } else {
        txt = txt + '{ "name" : " ", "table" : "' + tableName + '"}';
      }
      if((j + 1) < relations[i][2].length) {
        txt = txt + ', ';
      }
    }
    txt = txt + ']}';
    if ((i + 1) < relations.length) {
      txt = txt + ', ';
    }
  }

  // Viewport
  txt = txt + '], "viewport" : { "updateX" : "' + updateX + '", "updateY" : "' + updateY + '", "scale" : "' + viewport.scale + '"} }';
  //alert(txt);
  JSONObj = eval ("(" + txt + ")");
  return txt;
}

/*
 * Clears the diagram using delete Table
 */
function clearDiagram() {

  // Delete every table and anything attached to it
  while(tables.length > 0) {
    deleteTable(tables[0].get('.text')[0].getText().toLowerCase());
  }

  // Reset global variables and screen
  updateX = 0; updateY = 0;
  viewport = new Viewport(stage);
}

/*
 * Updates current schema with provided JSON schema
 */
function convertFromJSON(source) {

  clearDiagram();
  JSONObj = source;//eval ("(" + source + ")");

  if (source == null || source == '{}') {
    return false;
  }

  // Create tables
  for (var i = 0; i < JSONObj.tables.length; i++) {
    var myTable = JSONObj.tables[i];
    createTable(myTable.name, parseInt(myTable.xval), parseInt(myTable.yval));
    for (var j = 0; j < myTable.attributes.length; j++) {
      var myAttr = myTable.attributes[j];
      var type = '';
      switch(myAttr.dataType)
      {
      case 'VARCHAR(256)':
          type = 'text';
          break;
      case 'INTEGER':
          type = 'number';
          break;
      case 'DATETIME':
          type = 'date';
      }
      (myAttr.primary == "true") ? myAttr.primary = true : myAttr.primary = false;
      (myAttr.notnull == "true") ? myAttr.notnull = true : myAttr.notnull = false;
      (myAttr.unique == "true") ? myAttr.unique = true : myAttr.unique = false;
      createAttr(myAttr.name, type, myTable.name, myAttr.primary, myAttr.notnull, myAttr.unique, parseInt(myAttr.xval), parseInt(myAttr.yval));
    }
  }

  // Create Relations
  for (var i = 0; i < JSONObj.relations.length; i++) {
    var relation = JSONObj.relations[i];
    var relTables = new Array();
    for (var j = 0; j < relation.attributes.length; j++) {
      relTables.push(relation.attributes[j].table);
    }
    createRelation(relation.name, relTables, parseInt(relation.xval), parseInt(relation.yval));
  }

  // Set viewport
  if(JSONObj.viewport.scale != 1) {
    viewport.setZoom(parseInt(JSONObj.viewport.scale));
    viewport.draw();
  }
}

function testJSON() {
  var schemaSelected = getSelectVal(document.getElementById("schemaSelect"));
  switch (schemaSelected) {
    case 'Teacher-Student' :
      convertFromJSON(ts);
      break;
    case 'Advisor-Student' :
      convertFromJSON(ta);
      break;
    case 'Author-Book-Category' :
      convertFromJSON(book);
      break;
    case 'Employee-Department' :
      convertFromJSON(ed);
      break;
    default :
      alert("Schema not selected");
  }
}

/*
 * Converts current graph to proper RDS SQL
 */
function convertToSQL() {
    var code = '';
    var currName = '';
    var tableA, tableB;


    //Table Creation
    for (var i = 0; i < tables.length; i++) {

        var primary = '';
        currName = tables[i].get('.text')[0].getText();
        code = code + 'CREATE TABLE ' + dbInstance + '.' + currName + '\n(\n';
        for (var j = 0; j < tables[i].attr.length; j++) {

            var currAttr = new Array();
            for(var k = 0; k < attributes.length; k++) {
                if((attributes[k][0].get('.Atext')[0].getText().toLowerCase() == tables[i].attr[j].toLowerCase()) &&
                    (attributes[k][1].get('.text')[0].getText().toLowerCase() == currName.toLowerCase())) {
                    currAttr = attributes[k];
                }
            }

            code = code + '\t' + currAttr[0].get('.Atext')[0].getText() + ' ';

            switch(currAttr[2])
            {
            case 'text':
                code = code + 'VARCHAR(256)';
                break;
            case 'number':
                code = code + 'INTEGER';
                break;
            case 'date':
                code = code + 'DATETIME';
            }

            // Primary Key
            if(currAttr[3]) {
                code = code + ' NOT NULL';
                primary = currAttr[0].get('.Atext')[0].getText();
            }

            // Not Null
            if(currAttr[4]) {
                code = code + ' NOT NULL';
            }

            // Unique
            if(currAttr[5]) {
                code = code + ' UNIQUE';
            }

            code = code + ',\n';
        }
        code = code + '\tPRIMARY KEY (' + primary + ')\n'; //Assumes each table has a PRIMARY KEY
        code = code + ')\n%3B\n\n';
    }

    //Relation Table Creation
    for(var i = 0; i < relations.length; i++) {

        code = code + 'CREATE TABLE '+ dbInstance+'.' + relations[i][0].get('.Rtext')[0].getText() + '\n(\n\t';
        for(var j = 0; j < relations[i][2].length; j++) {
            var currTable = relations[i][2][j];
            var primary = getPrimaryKey(currTable.get('.text')[0].getText());
            code = code + primary[0].get('.Atext')[0].getText();

            switch(primary[2])
            {
            case 'text':
                code = code + 'VARCHAR(256)';
                break;
            case 'number':
                code = code + 'INTEGER';
                break;
            case 'date':
                code = code + 'DATETIME';
            }

            // Many to Many Relationship (and default)
            if(relations[i][3] == reltypes[4] || relations[i][3] == reltypes[0]) {
              code = code + ' NOT NULL REFERENCES ' + currTable.get('.text')[0].getText() + ' (' + primary[0].get('.Atext')[0].getText();
            } else
            // One to One Relationship
            if (relations[i][3] == reltypes[1]) {
              code = code + ' UNIQUE NOT NULL REFERENCES ' + currTable.get('.text')[0].getText() + ' (' + primary[0].get('.Atext')[0].getText();
            }

            if((j + 1) < relations[i][2].length) {
              code = code + '),\n\t';
            } else {
              code = code + ')\n\tPRIMARY KEY (';
            }
        }
        for (var j = 0; j < relations[i][2].length; j++) {
            var currTable = relations[i][2][j];
            var primary = getPrimaryKey(currTable.get('.text')[0].getText());
            code = code + primary[0].get('.Atext')[0].getText();
            if((j + 1) < relations[i][2].length) {
              code = code + ', ';
            } else {
              code = code + ')\n)\n;\n\n';
            }
        }
    }
    submitQuery('<%= "/users/#{@user.id}/servers/#{@server.id}/instances/#{@instance.id}" %>', code, convertToJSON(), (function(response){alert(response[0])}));
    redirect_to_show();
}

/*
 * Converts current graph to MySQL
 */
function convertToCode() {
    var code = '';
    var currName = '';
    var tableA, tableB;


    //Table Creation
    for (var i = 0; i < tables.length; i++) {

        var primary = '';
        var primaryKey = false;
        currName = tables[i].get('.text')[0].getText();
        code = code + 'CREATE TABLE ' + currName + ' (</p><p>    ';
        for (var j = 0; j < tables[i].attr.length; j++) {

            var currAttr = new Array();
            for(var k = 0; k < attributes.length; k++) {
                if((attributes[k][0].get('.Atext')[0].getText().toLowerCase() == tables[i].attr[j].toLowerCase()) &&
                    (attributes[k][1].get('.text')[0].getText().toLowerCase() == currName.toLowerCase())) {
                    currAttr = attributes[k];
                }
            }

            code = code + '    ' + currAttr[0].get('.Atext')[0].getText() + ' ';

            switch(currAttr[2])
            {
            case 'text':
                code = code + 'VARCHAR(256)';
                break;
            case 'number':
                code = code + 'INTEGER';
                break;
            case 'date':
                code = code + 'DATETIME';
            }

            //Primary Key
            if(currAttr[3]) {
                code = code + ' NOT NULL';
                primary = currAttr[0].get('.Atext')[0].getText();
                primaryKey = true;
            }

            //Not Null
            if(currAttr[4]) {
                code = code + ' NOT NULL';
            }

            //Unique
            if(currAttr[5]) {
                code = code + ' UNIQUE';
            }

            if(primaryKey && ((j + 1) == tables[i].attr.length) || (j+1) < tables[i].attr.length) {
                code = code + ',</p><p>    ';
            } else {
                code = code + '</p><p>';
            }

        }
        if(primaryKey) {
            code = code + '    PRIMARY KEY (' + primary + ')</p><p>';
        }
        code = code + ');</p><p>';
    }

    //Relation Table Creation
    for(var i = 0; i < relations.length; i++) {

        code = code + 'CREATE TABLE '+dbInstance+'.' + relations[i][0].get('.Rtext')[0].getText() + '(</p><p>';
        for(var j = 0; j < relations[i][2].length; j++) {
            var currTable = relations[i][2][j];
            if (!hasPrimaryKey(currTable.get('.text')[0].getText())) {
              alert('Connected tables must contain Primary Attribute');
              return;
            }
            var primary = getPrimaryKey(currTable.get('.text')[0].getText());
            code = code + primary[0].get('.Atext')[0].getText();

            switch(primary[2])
            {
            case 'text':
                code = code + ' VARCHAR(256)';
                break;
            case 'number':
                code = code + ' INTEGER';
                break;
            case 'date':
                code = code + ' DATETIME';
            }

            // Many to Many (and default)
            if (relations[i][3] == reltypes[4] || relations[i][3] == reltypes[0]) {
              code = code + ' NOT NULL REFERENCES ' + currTable.get('.text')[0].getText() + ' (' + primary[0].get('.Atext')[0].getText() + '),</p><p>';
            } else
            // One to One
            if (relations[i][3] == reltypes[1]) {
              code = code + ' UNIQUE NOT NULL REFERENCES ' + currTable.get('.text')[0].getText() + ' (' + primary[0].get('.Atext')[0].getText() + '),</p><p>';
            }

            if((j + 1) == relations[i][2].length) {
              code = code + 'PRIMARY KEY (';
            }
        }
        for (var j = 0; j < relations[i][2].length; j++) {
            var currTable = relations[i][2][j];
            var primary = getPrimaryKey(currTable.get('.text')[0].getText());
            code = code + primary[0].get('.Atext')[0].getText();
            if((j + 1) < relations[i][2].length) {
              code = code + ', ';
            } else {
              code = code + ')</p><p>); ';
            }
        }
    }
    code = code + '</p>';
    document.getElementById("DBCodeMySQL").innerHTML = code;
}



/********* HTML Helper Functions *********/
/*
* Generates HTML to dynamically populate selectors
* from dynamic data structures
*/
function genSelectInnerHTML(id, arr, type, write) {
  if(typeof(write) === 'undefined') write = 1; // default value
  var ret = "";
  if(type == 0) { // simple arrays
    for(i=0; i<arr.length; i++) {
      ret += "\t<option value=\"" + arr[i] + "\">" + arr[i] + "</option>\n";
    }
  }
  else if(type == 1) { // tables array
    for(i=0; i<arr.length; i++) {
      ret += "\t<option value=\"" + arr[i].get('.text')[0].getText() + "\">" + arr[i].get('.text')[0].getText() + "</option>\n";
    }
  }
  else { // relations array
    for(i=0; i<arr.length; i++) {
      ret += "\t<option value=\"" + arr[i][0].get('.Rtext')[0].getText() + "\">" + arr[i][0].get('.Rtext')[0].getText() + "</option>\n";
    }
  }
  if(write)
    document.getElementById(id).innerHTML = ret;
  else
    return ret;
}

/*
* Returns value at current selcted index from HTML selector
*/
function getSelectVal(select) {
  if(select == null) { return null; }
  else {
    return select.options[select.selectedIndex].value;
  }
}

/*
* Initializes modal to create new table
*/
function initNewTable() {
  document.getElementById("newTableName").value = "";
}

/*
* Saves new table if valid info from modal
*/
function saveNewTable(e) {
  var tableName = document.getElementById("newTableName").value;
  if(tableName != "" && uniqueTableName(tableName)) {
    $('#newTableModal').modal('hide'); // hide modal on save
    createTable(tableName, 525, 225);
  }
  else {
    alert("Table names must be unique and nonempty.");
  }
}

/*
* Initializes modal to create new attribute
*/
function initNewAttr() {
  genSelectInnerHTML("tableNameA", tables, 1);
  genSelectInnerHTML("newAttrType", datatypes, 0);
  document.getElementById("newAttrName").value = "";
  document.getElementById("setPrimary").checked = false;
  document.getElementById("setNotNull").checked = false;
  document.getElementById("setUnique").checked = false;
}

/*
* Saves new attribute if valid info from modal
*/
function saveNewAttr(e) {
  var tableName = getSelectVal(document.getElementById("tableNameA"));
  var attrName = document.getElementById("newAttrName").value;
  var attrType = getSelectVal(document.getElementById("newAttrType"));
  var attrPrimary = document.getElementById("setPrimary").checked;
  var attrNotNull = document.getElementById("setNotNull").checked;
  var attrUnique = document.getElementById("setUnique").checked;
  if(!validAttrName(attrName)) {
    alert("The attribute name you selected is reserved by the system.");
    return;
  }
  if(attrPrimary)     { attrNotNull = false; attrUnique = false; }
  else if(attrUnique) { attrNotNull = false; }
  if(attrName != "" && uniqueAttrName(attrName, tableName)) {
    $('#newAttributeModal').modal('hide'); // hide modal on save
    createAttr(attrName, attrType, tableName, attrPrimary, attrNotNull, attrUnique, 525, 225);
  }
  else {
    alert("Attribute names must be unique within a table and nonempty.");
  }
}

/*
* Initializes modal to edit existing table
*/
function initEditTable() {
  genSelectInnerHTML("oldTableName", tables, 1);
  document.getElementById("editTableName").value = "";
}

/*
* Saves changes to table if valid info from modal
*/
function saveEditTable(e) {
  var oldTableName = getSelectVal(document.getElementById("oldTableName"));
  var newTableName = document.getElementById("editTableName").value;
  if(newTableName != "" && uniqueTableName(newTableName)) {
    $('#editTableModal').modal('hide'); // hide modal on save
    editTableName(oldTableName, newTableName);
  }
  else {
    alert("Table names must be unique and nonempty.");
  }
}

/*
* Initializes modal to edit existing attribute
*/
function initEditAttr() {
  genSelectInnerHTML("tableNameB", tables, 1);
  // set invalid default index to ensure event is triggered later
  document.getElementById("tableNameB").selectedIndex = -1;
  document.getElementById("oldAttrName").selectedIndex = -1;
  document.getElementById("editAttrName").value = "";
  genSelectInnerHTML("editAttrType", datatypes, 0);
}

/*
* Updates attribute list based on table selection within modal
*/
function genAttrList(id1, id2) {
  var attrs = new Array();
  var tname = getSelectVal(document.getElementById(id1));
  var table = findTable(tname);
  for(i=0; i<table.attr.length; i++) {
    attrs.push(table.attr[i]);
  }
  genSelectInnerHTML(id2, attrs, 0);
  document.getElementById(id2).selectedIndex = -1; // need to trigger js event
}

/*
* Generates HTML to insert attributes into db
*/
function genAttrsInput() {
  var html = "";
  var tname = getSelectVal(document.getElementById("inputManualTableName"));
  var table = findTable(tname);
  for(i=0; i<table.attr.length; i++) {
    html += "<label for=\"attr" + i + "\">" + table.attr[i] + "</label>\n<input type=\"text\" id=\"attr" + i + "\">\n<br />";
  }
  document.getElementById("manualInputDiv").innerHTML = html;
}

function getAttrs(tableName) {
  var attrs = new Array();
  table = findTable(tableName);
  var i;
  for(i=0; i<table.attr.length; i++) {
    attrs.push(table.attr[i]);
  }
  return attrs;
}

/*
* Updates attribute properties based on currently selected attribute
*/
function genAttrProps() {
  var tableName = getSelectVal(document.getElementById("tableNameB"));
  var attrName = getSelectVal(document.getElementById("oldAttrName"));
  var attr = findAttr(attrName, tableName);
  var attrTypeIdx = datatypes.indexOf(attr[2]);
  var attrPrimary = ( (attr[3]) ? true : false );
  var attrNotNull = ( (attr[4]) ? true : false );
  var attrUnique = ( (attr[5]) ? true : false );
  document.getElementById("editAttrType").selectedIndex = attrTypeIdx;
  document.getElementById("editPrimary").checked = attrPrimary;
  document.getElementById("editNotNull").checked = attrNotNull;
  document.getElementById("editUnique").checked = attrUnique;
}

/*
* Updates relation properties based on currently selected relation
*/
function genRelProps() {
  var relName = getSelectVal(document.getElementById("relNameC"));
  var rel = findRelation(relName);
  var relTypeIdx = reltypes.indexOf(rel[3]);
  document.getElementById("editRelType").selectedIndex = relTypeIdx;
}

/*
* Saves changes to attribute if valid info from modal
*/
function saveEditAttr(e) {
  var tableName = getSelectVal(document.getElementById("tableNameB"));
  var oldAttrName = getSelectVal(document.getElementById("oldAttrName"));
  var newAttrName = document.getElementById("editAttrName").value;
  var newAttrType = getSelectVal(document.getElementById("editAttrType"));
  var attrPrimary = document.getElementById("editPrimary").checked;
  var attrNotNull = document.getElementById("editNotNull").checked;
  var attrUnique = document.getElementById("editUnique").checked;
  if(!validAttrName(newAttrName)) {
    alert("The attribute name you selected is reserved by the system.");
    return;
  }
  if(attrPrimary)     { attrNotNull = false; attrUnique = false; }
  else if(attrUnique) { attrNotNull = false; }
  if(oldAttrName == newAttrName) {
    if(editAttrType(oldAttrName, tableName, newAttrType) || editAttrPrimary(newAttrName, tableName, attrPrimary)
      || editAttrNotNull(newAttrName, tableName, attrNotNull) || editAttrUnique(newAttrName, tableName, attrUnique)) {
      $('#editAttributeModal').modal('hide'); // hide modal on save
    }
  }
  else if(newAttrName != "" && uniqueAttrName(newAttrName, tableName)) {
    $('#editAttributeModal').modal('hide'); // hide modal on save
    editAttrName(oldAttrName, newAttrName, tableName);
    editAttrType(newAttrName, tableName, newAttrType);
    editAttrPrimary(newAttrName, tableName, attrPrimary);
    editAttrNotNull(newAttrName, tableName, attrNotNull);
    editAttrUnique(newAttrName, tableName, attrUnique);
  }
  else {
    alert("Attribute names must be unique within a table and nonempty.");
  }
}

/*
* Initializes modal to delete existing table
*/
function initDelTable() {
  genSelectInnerHTML("delTableName", tables, 1);
}

/*
* Deletes table specified by modal
*/
function delTable(e) {
  var tableName = getSelectVal(document.getElementById("delTableName"));
  if(tableName != "") {
    $('#deleteTableModal').modal('hide'); // hide modal on save
    deleteTable(tableName);
  }
}

/*
* Initializes modal to delete existing attribute
*/
function initDelAttr() {
  genSelectInnerHTML("tableNameC", tables, 1);
  document.getElementById("tableNameC").selectedIndex = -1;
  document.getElementById("delAttrName").selectedIndex = -1;
}

/*
* Deletes attribute specified by modal
*/
function delAttr(e) {
  var tableName = getSelectVal(document.getElementById("tableNameC"));
  var attrName = getSelectVal(document.getElementById("delAttrName"));
  if(tableName != "" && attrName != "") {
    $('#deleteAttributeModal').modal('hide'); // hide modal on save
    deleteAttribute(attrName, tableName);
  }
}

var count;

/*
* Initializes modal to create new relation
*/
function initNewRelation() {
  document.getElementById("relNameA").value = "";
  document.getElementById("tableInputList").innerHTML = "";
  count = 1;
  for (var i = 0; i < 2; i++) {
    createRTableInputs();
  }
}

/*
 * Creates new table inputes
 */
function createRTableInputs() {

  var labelName = 'Table name #' + count;
  var myLabel = document.createElement('label');
  myLabel.setAttribute("for", labelName);
  myLabel.innerHTML = '<strong>' + labelName + '</strong>';
  var mySelect = document.createElement('select');
  mySelect.setAttribute("id", labelName);

  document.getElementById("tableInputList").appendChild(myLabel);
  document.getElementById("tableInputList").appendChild(mySelect);
  genSelectInnerHTML(labelName, tables, 1);
  document.getElementById(labelName).selectedIndex = -1;
  count++;
}


/*
* Saves new relation if valid info from modal
*/
function saveNewRelation(e) {
  var relName = document.getElementById("relNameA").value;
  var myTables = new Array();
  for (var i = 1; i < count; i++) {
    var labelName = 'Table name #' + i;
    var tableName = getSelectVal(document.getElementById(labelName));
    if(myTables.indexOf(tableName) != -1) {
      alert("Cannot connect a table to itself.");
    } else {
      myTables.push(tableName);
    }
  }
  if(relName != "" && uniqueRelName(relName)) {
    $('#newRelationModal').modal('hide'); // hide modal on save
    createRelation(relName, myTables, 525, 225);
  }
  else {
    alert("Relation names must be unique and nonempty.");
  }
}

/*
* Initializes modal to edit existing relation
*/
function initEditRelation() {
  genSelectInnerHTML("relNameC", relations, 2);
  // need to trigger js event
  document.getElementById("relNameC").selectedIndex = -1;
  document.getElementById("editRelName").value = "";
}

/*
* Updates relations list based on selection within modal
*/
function editRelation(e) {
  var oldRelName = getSelectVal(document.getElementById("relNameC"));
  var newRelName = document.getElementById("editRelName").value;

  if(oldRelName == newRelName) {
    $('#editRelationModal').modal('hide'); // hide modal on save
  }
  else if(newRelName != "" && uniqueRelName(newRelName)) {
    $('#editRelationModal').modal('hide'); // hide modal on save
      editRelationName(oldRelName, newRelName);
  }
  else {
    alert("Relation names must be unique and nonempty.");
  }
}

/*
* Initializes modal to delete existing relation
*/
function initDelRelation() {
  genSelectInnerHTML("relNameB", relations, 2);
}

/*
* Deletes relation specified by modal
*/
function delRelation(e) {
  var relName = getSelectVal(document.getElementById("relNameB"));
  if(relName != "") {
    $('#deleteRelationModal').modal('hide'); // hide modal on save
    deleteRelation(relName);
  }
}


/*
* Sends post request to query endpoint
*/
function submitQuery(path, query, json, callback){
  $.ajax({url: path,
    type: 'PUT',
    beforeSend: function(xhr){xhr.setRequestHeader('X-CSRF-TOKEN',$('meta[name="csrf-token"]').attr('content'))},
    data: 'query=' + query + '&json=' + json,
    success: function(response){callback(response)}
  });
}

function redirect_to_show() { document.location.href = '<%="/users/#{@user.id}/servers/#{@server.id}/instances/#{@instance.id}"%>'; }

/*
* Initializes modal to finalize database schema
*/
function initFinalize() {
  finalize("finalizeModalDiv");
}

/*
* Advances finalization process to next step.
* Called each time a modal must change its body
* Either continues to next finalization step, or
*   closes the modal if all steps are complete
*/
function finalize(id) {
  if(!isFinalized()) {

    // handle last finalization step
    var div = document.getElementById(id);
    var html = "";
    //div.innerHTML = html;

    if(finalizeArr == 1) { // table constraint
      // display next table constraint (primary key)
      var tableName = tables[finalizeIdx].get('.text')[0].getText();
      var pkey = getSelectVal(document.getElementById("finalizeSelector"));

      while(pkey != "sysid" && obviousPrimaryKey(tableName) && finalizeIdx < tables.length) {
        tableName = tables[finalizeIdx].get('.text')[0].getText();
        finalizeIdx++;
      }

      if(pkey == "Don't Know") {
        pkey = "sysid";
        createAttr(pkey, 'number', tableName, true, false, false, 525, 225);
        finalizeIdx++;
	if(finalizeIdx != tables.length) {
          tableName = tables[finalizeIdx].get('.text')[0].getText();
	}
      }
      else if(pkey != null) {
        editAttrPrimary(pkey, tableName, true);
        finalizeIdx++;
        if(finalizeIdx != tables.length) {
          tableName = tables[finalizeIdx].get('.text')[0].getText();
	}
      }

      if(finalizeIdx >= tables.length) {
        finalizeArr++;
        finalizeIdx = 0;
	finalize("finalizeModalDiv");
	return;
      }

      finalizeTableHTML(div, tableName);
    }
    else if(finalizeArr == 2) { // attribute constraint
      // display next attribute constraint (not null or unique)
      var attr = attributes[finalizeIdx];

      if(attr == null) {
	finalizeArr++;
	finalizeIdx = 0;
	finalize("finalizeModalDiv");
	return;
      }
      var attrNotNull = document.getElementById("constrainNotNull");
      (attrNotNull == null) ? attrNotNull = null : attrNotNull = attrNotNull.checked;
      var attrUnique = document.getElementById("constrainUnique");
      (attrUnique == null) ? attrUnique = null : attrUnique = attrUnique.checked;
      if(attrUnique) {
	attr[5] = true;
	finalizeIdx++;
        if(finalizeIdx != attributes.length) {
	  attr = attributes[finalizeIdx];
	}
      }
      else if(attrNotNull) {
	attr[4] = true;
	finalizeIdx++;
        if(finalizeIdx != attributes.length) {
	  attr = attributes[finalizeIdx];
	}
      }
      else if(attrUnique != null && attrNotNull != null) {
	finalizeIdx++;
        if(finalizeIdx != attributes.length) {
	  attr = attributes[finalizeIdx];
	}
      }

      while((attr[3] || attr[4] || attr[5]) && finalizeIdx < attributes.length-1) {
        finalizeIdx++;
        attr = attributes[finalizeIdx];
      }

      if(finalizeIdx == attributes.length-1) {
        if(attr[3] || attr[4] || attr[5]) finalizeIdx++; // exception: skip last attr, already constrained
      }

      if(finalizeIdx >= attributes.length) {
        finalizeArr++;
        finalizeIdx = 0;
        finalize("finalizeModalDiv");
	return;
      }

      if(attr[0].get('.Atext')[0].getText() != "sysid") {
        finalizeAttrHTML(div, attr);
      }
      else {
	finalizeIdx++;
	finalize("finalizeModalDiv");
	return;
      }
    }
    else if(finalizeArr == 3) { // reltaion constraint
      var one_to_one = document.getElementById("constrainOTO");
      var many_to_many = document.getElementById("constrainMTM");
      if(many_to_many) one_to_one = false;
      if(one_to_one != null) {
        one_to_one = one_to_one.checked;
        many_to_many = many_to_many.checked;
        rel = relations[finalizeIdx];
        if(one_to_one) {
          rel[3] = "one-to-one";
          finalizeIdx++;
        }
        else {
          rel[3] = "many-to-many";
          finalizeIdx++;
         }
      }

      if(finalizeIdx >= relations.length) {
        finalizeArr++;
        finalize("finalizeModalDiv");
        return;
      }
      else {
        // display next relation constraint (relation types for connected tables)
	rel = relations[finalizeIdx];
        while(rel[3] != "undefined") {
	  finalizeIdx++;
          if(finalizeIdx < relations.length) {
	    rel=relations[finalizeIdx];
	  }
	  else {
	    finalize("finalizeModalDiv");
	    return;
	  }
	}
        finalizeRelHTML(div, rel);
      }
    }
  }
  else { // database schema is fully constrained
    finalizeArr = 1; finalizeIdx = 0;
    convertToSQL();
    $('#finalizeModal').modal('hide'); // hide modal on completion of schema finalization
    // after this point we can convert our JS objects into SQL to send to RDS
  }
}

function isFinalized() {
  return finalizeArr > 3;
}

/*
* Generates HTML for finalizing table constraints
*/
function finalizeTableHTML(div, tableName) {
      var html = "";
      html += "<h4>Constrain Table: " + tableName.toLowerCase() + "</h4>";
      html += "<p>Does one of the attributes in the list below uniquely identify a distinct table entry?<br /><em>e.g. For a person table, a social security number is unique for a given person and identifies a distinct person.</em><br />If so, select that attribute from the list.  Otherwise, select Don't Know.</p>";

      var attrs = getAttrs(tableName);
      html += "<select id='finalizeSelector'>" + genSelectInnerHTML("finalizeSelector", attrs, 0, 0) + "</select>";

      div.innerHTML = html;

      // Don't know option - generate automatic sysid
      var opt = document.createElement("option");
      opt.text = "Don't Know";
      var sel = document.getElementById("finalizeSelector");
      sel.add(opt, sel.options[null]);
      sel.selectedIndex = -1;
}

/*
* Generates HTML for finalizing attribute constraints
*/
function finalizeAttrHTML(div, attr) {
        var html = "";
        html += "<h4>Constrain Attribute: " + attr[1].get('.text')[0].getText().toLowerCase() +  "." + attr[0].get('.Atext')[0].getText().toLowerCase() + "</h4>";
        html += "<p>Is the above attribute unique for all table entries?<br /><em>e.g. For a user accounts table, an email address is unique for every user account entry.</em><br />If so, check the box below.  Otherwise, leave it blank.</p>";

        html += "<input type=\"checkbox\" id=\"constrainUnique\" value=\"1\">&nbsp;\n<label for=\"constrainUnique\"><span style=\"border-bottom:1px dashed #000;\">Attribute is Unique</span><label><br />";

        html += "<p>If the above question does not apply, is the attribute required for every table entry, or is it an optional field?  If it is required, check the box below.  If it is optional, leave it blank.</p>";

        html += "<input type=\"checkbox\" id=\"constrainNotNull\" value=\"1\">&nbsp;\n<label for=\"constrainNotNull\"><span style=\"border-bottom:1px dashed #000;\">Attribute is Required</span><label><br />";

        div.innerHTML = html;
}

/*
* Generates HTML for finalizing relation constraints
*/
function finalizeRelHTML(div, rel) {
        var tname1 = rel[2][0].get('.text')[0].getText();
	var tname2 = rel[2][1].get('.text')[0].getText();
	var reltype = rel[3];

        var html = "";
        html += "<h4>Constrain Relation: " + rel[0].get('.Rtext')[0].getText().toLowerCase() + "</h4>";
	html += "<p>Does an instance of <strong>" + tname1  +  "</strong> have a single corresponding instance of <strong>" + tname2 + "</strong>?<br /><em>e.g. A <strong>Person</strong> instance could be required to have a single corresponding <strong>DriversLicense</strong> instance</em>.<br />If so, make a selection below.</p>";

        html += "<input type=\"checkbox\" id=\"constrainOTO\" value=\"1\">&nbsp;\n<label for=\"constrainOTO\"><span style=\"border-bottom:1px dashed #000;\">one-to-one</span><label><br />";

	html += "<br /><p>Otherwise, are there several instances of <strong>" + tname1 + "</strong> that can correspond to several instances of <strong>" + tname2 + "</strong>?<br /><em>e.g. An instance of <strong>Author</strong> could have several corresponding instances of <strong>Book</strong> instance</em> (multiple books per author), and an instance of <strong>Book</strong> could also have several corresponding instances of <strong>Author</strong> (multiple authors per book).<br />If so, make a selection below.</p>";

        html += "<input type=\"checkbox\" id=\"constrainMTM\" value=\"1\">&nbsp;\n<label for=\"constrainMTM\"><span style=\"border-bottom:1px dashed #000;\">many-to-many</span><label><br />";

	div.innerHTML = html;
}

/********* CSV Methods *********/

/*
* Retrieve table information
*/
function getTableInfo(id) {
  var attrTypes = new Array();
  var tableName = getSelectVal(document.getElementById(id));
  var tableAttributes = getAttrs(tableName);
  for (var i = 0; i < tableAttributes.length; i++) {
    var currType = findAttr(tableAttributes[i], tableName)[2];
    attrTypes.push(currType);
  }
  return attrTypes;
}

/*
* Initializes CSV Input Modal
*/
function initCSVInput() {
  genSelectInnerHTML("inputCSVTableName", tables, 1);
}

/*
* Add data from CSV
*/
function addCSVData() {
  var attrTypes = getTableInfo("inputCSVTableName");

  // Parse CSV file to double array
  var csvValues = new Array();
  var csvLines = csv.split(/\r\n|\n/);
  for (var i = 0; i < csvLines.length; i++) {
    //alert(csvLines[i]);
    var entries = csvLines[i].replace(/\s+/g, '').split(',');
    if (attrTypes.length != entries.length) {
      alert("Entry in line: " + i + " of csv file does not match the table attributes.");
      return false;
    }
    var entry = new Array()
    for (var j = 0; j < attrTypes.length; j++) {
      switch(attrTypes[j]) {
        case 'text':
          if(entries[j].match(/^[-\sa-zA-Z]*$/)) { // Currently allows for blank strings
            entry.push(entries[j]);
          }
          break;
        case 'number':
          if(entries[j].match(/^\d+$/)) {
            entry.push(parseInt(entries[j]));
          }
          break;
        case 'date':
          if(entries[j].match()) {

          }
      }
    }
    csvValues.push(entry);
  }


  // Sending insert statements to database
  for (var i = 0; i < csvValues.length; i++) {
    var insertTxt = 'INSERT INTO ' + csvTableName + '\nVALUES (';
    for (var j = 0; j < csvValues[i].length; j++) {
      if(attrTypes[j] == 'text') {
        insertTxt = insertTxt + "'" + csvValues[i][j] + "'";
      } else {
        insertTxt = insertTxt + csvValues[i][j];
      }

      if((j+ 1) < csvValues[i].length) {
        insertTxt = insertTxt + ', ';
      } else {
        insertTxt = insertTxt + ')%3B';
      }
    }
    alert(insertTxt);
    //Send insert statement to database
  }
  $('#uploadModal').modal('hide');
  return true;
  //TODO: figure out how to only use required fields
}

/*
* Initializes Manual Input Modal
*/
function initManualInput() {
  genSelectInnerHTML("inputManualTableName", tables, 1);
  document.getElementById("inputManualTableName").selectedIndex = -1; // need to trigger JS event
}

function manualInput() {
  var div = document.getElementById("manualInputDiv");
  var tableName = getSelectVal(document.getElementById("inputManualTableName"));
  var attrTypes = getTableInfo("inputManualTableName");
  var entries = new Array();
  for (var i = 0; i < attrTypes.length; i++) {
      entries.push(document.getElementById("attr" + i).value);
  }
  var entry = new Array();
  for (var j = 0; j < attrTypes.length; j++) {
      switch(attrTypes[j]) {
        case 'text':
          if(entries[j].match(/^[-\sa-zA-Z]*$/)) { // Currently allows for blank strings
            entry.push(entries[j]);
          }
          break;
        case 'number':
          if(entries[j].match(/^\d+$/)) {
            entry.push(parseInt(entries[j]));
          }
          break;
        case 'date':
          if(entries[j].match()) {

          }
      }
  }
  $('#manualInputModal').modal('hide'); // hide modal on save
  var sql = "INSERT INTO " + tableName + " VALUES (";
  for (var k = 0; k < attrTypes.length; k++) {
    if(attrTypes[k] == 'text') {
      sql += "\'" + entry[k] + "\'";
    }
    else {
      sql += entry[k];
    }
    if(k != attrTypes.length-1) {
      sql += ", ";
    }
  }
  sql += ")%3B";
  alert(sql);
}
</script>

  <!-- newTableModal -->
  <div id="newTableModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="newTableModalLabel" aria-hidden="true">
    <div class="modal-header">
      <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
      <h3 id="newTableModalLabel">Create new table</h3>
    </div>
    <div class="modal-body">
      <label for="newTableName"><strong>Table name</strong></label>
      <input type="text" id="newTableName" value="">
    </div>
    <div class="modal-footer">
      <button class="btn" data-dismiss="modal">Close</button>
      <button id="newTableBtn" class="btn btn-primary" onclick="saveNewTable()">Save table</button>
    </div>
  </div>

  <!-- newAttributeModal -->
    <div id="newAttributeModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="newAttributeModalLabel" aria-hidden="true">
    <div class="modal-header">
      <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
      <h3 id="newAttributeModalLabel">Create new attribute</h3>
    </div>
    <div class="modal-body">
      <label for="tableNameA"><strong>Table name</strong></label>
      <select id="tableNameA">
      </select>
      <label for="newAttrName"><strong>Attribute name</strong></label>
      <input type="text" id="newAttrName" value="">
      <label for="newAttrType"><strong>Attribute type</strong></label>
      <select id="newAttrType">
      </select><br />
      <input type="checkbox" id="setPrimary" value="1">&nbsp;
      <label for="setPrimary"><span style="border-bottom:1px dashed #000;" title="Primary Key: uniquely identifies records in this table, e.g. SSN identifies Person">Primary?</span><label><br />
      <input type="checkbox" id="setNotNull" value="1">&nbsp;
      <label for="setNotNull"><span style="border-bottom:1px dashed #000;" title="Not Null: attribute cannot be missing when added to table, e.g. Name is necessary to differentiate a person, but is not a unique identifier">Not Null?</span><label><br />
      <input type="checkbox" id="setUnique" value="1">&nbsp;
      <label for="setUnique"><span style="border-bottom:1px dashed #000;" title="Unique: attribute is unique in this table, e.g. Drivers License is unique but might not be a unique identifier for a Person">Unique?</span><label><br />
    </div>
    <div class="modal-footer">
      <button class="btn" data-dismiss="modal">Close</button>
      <button id="newAttrBtn" class="btn btn-primary" onclick="saveNewAttr()">Save attribute</button>
    </div>
  </div>

  <!-- editTableModal -->
  <div id="editTableModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="editTableModalLabel" aria-hidden="true">
    <div class="modal-header">
      <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
      <h3 id="editTableModalLabel">Edit table</h3>
    </div>
    <div class="modal-body">
      <label for="oldTableName"><strong>Table name</strong></label>
      <select id="oldTableName">
      </select>
      <label for="editTableName"><strong>New table name</strong></label>
      <input type="text" id="editTableName" value="">
    </div>
    <div class="modal-footer">
      <button class="btn" data-dismiss="modal">Close</button>
      <button id="editTableBtn" class="btn btn-primary" onclick="saveEditTable()">Save changes</button>
    </div>
  </div>

  <!-- editAttributeModal -->
  <div id="editAttributeModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="editAttributeModalLabel" aria-hidden="true">
    <div class="modal-header">
      <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
      <h3 id="editAttributeModalLabel">Edit attribute</h3>
    </div>
    <div class="modal-body">
      <label for="tableNameB"><strong>Table name</strong></label>
      <select id="tableNameB" onchange="genAttrList('tableNameB', 'oldAttrName')">
      </select>
      <label for="oldAttrName"><strong>Current attribute name</strong></label>
      <select id="oldAttrName" onchange="genAttrProps()">
      </select>
      <label for="editAttrName"><strong>New attribute name</strong></label>
      <input type="text" id="editAttrName" value="">
      <label for="editAttrType"><strong>Attribute type</strong></label>
      <select id="editAttrType">
      </select><br />
      <input type="checkbox" id="editPrimary" value="1">&nbsp;
      <label for="editPrimary"><span style="border-bottom:1px dashed #000;" title="Primary Key: uniquely identifies records in this table, e.g. SSN identifies Person">Primary?</span><label><br />
      <input type="checkbox" id="editNotNull" value="1">&nbsp;
      <label for="editNotNull"><span style="border-bottom:1px dashed #000;" title="Not Null: attribute cannot be missing when added to table, e.g. Name is necessary to differentiate a person, but is not a unique identifier">Not Null?</span><label><br />
      <input type="checkbox" id="editUnique" value="1">&nbsp;
      <label for="editUnique"><span style="border-bottom:1px dashed #000;" title="Unique: attribute is unique in this table, e.g. Drivers License is unique but might not be a unique identifier for a Person">Unique?</span><label><br />
    </div>
    <div class="modal-footer">
      <button class="btn" data-dismiss="modal">Close</button>
      <button id="editAttrBtn" class="btn btn-primary" onclick="saveEditAttr()">Save changes</button>
    </div>
  </div>

  <br />
  <div class="row">

  <!-- deleteTableModal -->
  <div id="deleteTableModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="deleteTableModalLabel" aria-hidden="true">
    <div class="modal-header">
      <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
      <h3 id="deleteTableModalLabel">Delete table</h3>
    </div>
    <div class="modal-body">
      <label for="delTableName"><strong>Table name</strong></label>
      <select id="delTableName">
      </select>
    </div>
    <div class="modal-footer">
      <button class="btn" data-dismiss="modal">Close</button>
      <button id="delTableBtn" class="btn btn-danger" onclick="delTable()">Delete table</button>
    </div>
    </div>

    <!-- deleteAttributeModal -->
    <div id="deleteAttributeModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="deleteAttributeModalLabel" aria-hidden="true">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
        <h3 id="deleteAttributeModalLabel">Delete attribute</h3>
      </div>
      <div class="modal-body">
        <label for="tableNameC"><strong>Table name</strong></label>
        <select id="tableNameC" onchange="genAttrList('tableNameC', 'delAttrName')">
        </select>
        <label for="delAttrName"><strong>Attribute name</strong></label>
        <select id="delAttrName">
        </select>
      </div>
      <div class="modal-footer">
        <button class="btn" data-dismiss="modal">Close</button>
        <button id="delAttrBtn" class="btn btn-danger" onclick="delAttr()">Delete attribute</button>
      </div>
    </div>

  <!-- newRelationModal -->
  <div id="newRelationModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="newRelationModalLabel" aria-hidden="true">
    <div class="modal-header">
      <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
      <h3 id="newRelationModalLabel">Connect tables</h3>
    </div>
    <div class="modal-body">
      <label for="relNameA"><strong>Relation name</strong></label>
      <input type="text" id="relNameA" value="">
      <div id="tableInputList">

      </div>
      <button class='btn btn-primary' id="addTableInputs" onClick="createRTableInputs()">Add New Table</button>
    </div>
    <div class="modal-footer">
      <button class="btn" data-dismiss="modal">Close</button>
      <button id="newRelBtn" class="btn btn-primary" onclick="saveNewRelation()">Save relation</button>
    </div>
    </div>

  <!-- editRelationModal -->
  <div id="editRelationModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="editRelationModalLabel" aria-hidden="true">
    <div class="modal-header">
      <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
      <h3 id="editRelationModalLabel">Edit relation</h3>
    </div>
    <div class="modal-body">
      <label for="relNameC"><strong>Current relation name</strong></label>
      <select id="relNameC" onchange="genRelProps()">
      </select>
      <label for="editRelName"><strong>New relation name</strong></label>
      <input type="text" id="editRelName" value="">
    </div>
    <div class="modal-footer">
      <button class="btn" data-dismiss="modal">Close</button>
      <button id="editRelBtn" class="btn btn-primary" onclick="editRelation()">Edit relation</button>
    </div>
  </div>

  <!-- deleteRelationModal -->
    <div id="deleteRelationModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="deleteRelationModalLabel" aria-hidden="true">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
        <h3 id="deleteRelationModalLabel">Delete relation</h3>
      </div>
      <div class="modal-body">
        <label for="relNameB"><strong>Relation name</strong></label>
        <select id="relNameB">
	</select>
      </div>
      <div class="modal-footer">
        <button class="btn" data-dismiss="modal">Close</button>
        <button id="delRelBtn" class="btn btn-danger" onclick="delRelation()">Delete relation</button>
      </div>
    </div>

  <!-- finalizeModal -->
    <div id="finalizeModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="finalizeModalLabel" aria-hidden="true">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
        <h3 id="finalizeModalLabel">Final Steps</h3>
      </div>
      <div id="finalizeModalDiv" class="modal-body">
      </div>
      <div class="modal-footer">
        <button class="btn" data-dismiss="modal">Close</button>
        <button id="finalizeBtn" class="btn btn-primary" onclick="finalize('finalizeModalDiv')">Add Constraint</button>
      </div>
    </div>

  <!-- CodeModal -->
    <div id="DBCode" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="DBCode" aria-hidden="true">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
        <h3>Code of Schema</h3>
      </div>
      <div class="modal-body">
        <h3>MySQL</h3>
        <div id="DBCodeMySQL"></div>
      </div>
      <div class="modal-footer">
        <button class="btn" data-dismiss="modal">Close</button>
      </div>
    </div>

 <!-- table info display -->
    <div class="span8">
        <div class="row-fluid">
            <div class="span3">
                <h5>Show/Hide Attributes</h5>
            </div>
            <div class="span1">
                <input id="showAttr" onClick="onAttrShow()" type="checkbox" style="float-right" checked>
            </div>
            <div class="span3">
                <h5>Show/Hide Relations</h5>
            </div>
            <div class="span1">
                <input id="showRel" onClick="onRelShow()" type="checkbox" style="float-right" checked>
            </div>
        </div> <br />
        <table class= "table table-bordered">
            <tr>
                <td><div id="nameTitle">Table Name: </div></td>
                <td><div id="name">None</div></td>
            </tr>
            <tr>
                <td><div id="attributeTitle">Attributes: </div></td>
                <td><div id="attribute">None</div></td>
            </tr>
        </table>
    </div>

    <!-- GUI buttons -->
    <div class="span4">
      <a data-toggle="modal" href="#newTableModal" class="btn btn-primary" onclick="initNewTable()">New table</a>
      <a data-toggle="modal" href="#editTableModal" class="btn btn-warning" onclick="initEditTable()">Edit table</a>
      <a data-toggle="modal" href="#deleteTableModal"  class="btn btn-danger" onclick="initDelTable()">Delete table</a>
      <br /><br />
      <a data-toggle="modal" href="#newAttributeModal" class="btn btn-primary" onclick="initNewAttr()">New attribute</a>
      <a data-toggle="modal" href="#editAttributeModal" class="btn btn-warning" onclick="initEditAttr()">Edit attribute</a>
      <a data-toggle="modal" href="#deleteAttributeModal" class="btn btn-danger" onclick="initDelAttr()">Delete attribute</a>
      <br /><br />
      <a data-toggle="modal" href="#newRelationModal" class="btn btn-primary" onclick="initNewRelation()">Connect tables</a>
      <a data-toggle="modal" href="#editRelationModal" class="btn btn-warning" onclick="initEditRelation()">Edit connection</a>
      <a data-toggle="modal" href="#deleteRelationModal" class="btn btn-danger" onclick="initDelRelation()">Disconnect</a>
      <br /><br />
      <a data-toggle="modal" href="#finalizeModal" class="btn btn-success" onclick="initFinalize()">Finalize</a>
      <a data-toggle="modal" href="#DBCode" class="btn" onClick="convertToCode()">Show Code</a>
      <a class="btn btn-danger" onclick="clearDiagram()">Clear Schema</a>
    </div>
  </div>
</div>
<script type="text/javascript">

$(document).ready( function() {
    // bind mouse wheel to affect scale
	$('#container').bind('mousewheel', function(event, delta) {

		// (delta will be 1 or -1)

		switch( delta ) {
			case -1:
				viewport.zoomOut();
				viewport.draw();
				break;
			case 1:
				viewport.zoomIn();
				viewport.draw();
				break;
		}

		// oh yeah, cancel the scroll!
		event.preventDefault();
	});

	var ArrowLeft = 37;
	var ArrowRight = 39;
	var ArrowUp = 38;
	var ArrowDown = 40;

	//var xOffset = 0;
	//var yOffset = 0;
	$(document).keydown(function(event){

		var keyCode = event.keyCode;

		//var stageMoveX = 0;
		//var stageMoveY = 0;
		switch( keyCode ) {
			case ArrowLeft:
				//stageMoveX--;
				viewport.panLeft(10);
				updateX += 10 * (1/viewport.scale);
        /*
        if(invert == true)
          updateX += 10 * (1/viewport.scale);
        else
          updateX -= 10 * (1/viewport.scale);
        */
				viewport.draw();
				event.preventDefault();
				break;

			case ArrowRight:
				viewport.panRight(10);
				updateX -= 10 * (1/viewport.scale);
        /*
        if(invert == true)
          updateX -= 10 * (1/viewport.scale);
        else
          updateX += 10 * (1/viewport.scale);
        */
				viewport.draw();
				event.preventDefault();
				break;

			case ArrowUp:
				viewport.panUp(10);
				updateY += 10 * (1/viewport.scale);
        /*
        if(invert == true)
          updateY += 10 * (1/viewport.scale);
        else
          updateY -= 10 * (1/viewport.scale);
        */
				viewport.draw();
				event.preventDefault();
				break;

			case ArrowDown:
				viewport.panDown(10);
				updateY -= 10 * (1/viewport.scale);
        /*
        if(invert == true)
          updateX -= 10 * (1/viewport.scale);
        else
          updateX += 10 * (1/viewport.scale);
        */
				viewport.draw();
				event.preventDefault();
				break;
		}

		// oh yeah, cancel the click!
		//event.preventDefault();
	});
});
</script>
